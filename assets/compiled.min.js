/**
 * Copyright (C) 2017 Kyle Florence
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @website https://github.com/kflorence/jquery-deserialize/
 * @version 2.0.0-rc1
 *
 * Dual licensed under the MIT and GPLv2 licenses.
 */
(function( factory ) {
    if ( typeof module === "object" && module.exports ) {
        // Node/CommonJS
        module.exports = factory( require( "jquery" ) );

    } else {
        // Browser globals
        factory( window.jQuery );
    }
}(function( $ ) {

    /**
     * Updates a key/valueArray with the given property and value. Values will always be stored as arrays.
     *
     * @param prop The property to add the value to.
     * @param value The value to add.
     * @param obj The object to update.
     * @returns {object} Updated object.
     */
    function updateKeyValueArray( prop, value, obj ) {
        var current = obj[ prop ];

        if ( current === undefined ) {
            obj[ prop ] = [ value ];

        } else {
            current.push( value );
        }

        return obj;
    }

    /**
     * Get all of the fields contained within the given elements by name.
     *
     * @param $elements jQuery object of elements.
     * @param filter Custom filter to apply to the list of fields.
     * @returns {object} All of the fields contained within the given elements, keyed by name.
     */
    function getFieldsByName( $elements, filter ) {
        var elementsByName = {};

        // Extract fields from elements
        var fields = $elements
            .map(function convertFormToElements() {
                return this.elements ? $.makeArray( this.elements ) : this;
            })
            .filter( filter || ":input:not(:disabled)" )
            .get();

        $.each( fields, function( index, field ) {
            updateKeyValueArray( field.name, field, elementsByName );
        });

        return elementsByName;
    }

    /**
     * Figure out the type of an element. Input type will be used first, falling back to nodeName.
     *
     * @param element DOM element to check type of.
     * @returns {string} The element's type.
     */
    function getElementType( element ) {
        return ( element.type || element.nodeName ).toLowerCase();
    }

    /**
     * Normalize the provided data into a key/valueArray store.
     *
     * @param data The data provided by the user to the plugin.
     * @returns {object} The data normalized into a key/valueArray store.
     */
    function normalizeData( data ) {
        var normalized = {};
        var rPlus = /\+/g;

        // Convert data from .serializeObject() notation
        if ( $.isPlainObject( data ) ) {
            $.extend( normalized, data );

            // Convert non-array values into an array
            $.each( normalized, function( name, value ) {
                if ( !$.isArray( value ) ) {
                    normalized[ name ] = [ value ];
                }
            });

            // Convert data from .serializeArray() notation
        } else if ( $.isArray( data ) ) {
            $.each( data, function( index, field ) {
                updateKeyValueArray( field.name, field.value, normalized );
            });

            // Convert data from .serialize() notation
        } else if ( typeof data === "string" ) {
            $.each( data.split( "&" ), function( index, field ) {
                var current = field.split( "=" );
                var name = decodeURIComponent( current[ 0 ].replace( rPlus, "%20" ) );
                var value = decodeURIComponent( current[ 1 ].replace( rPlus, "%20" ) );
                updateKeyValueArray( name, value, normalized );
            });
        }

        return normalized;
    }

    /**
     * Map of property name -> element types.
     *
     * @type {object}
     */
    var updateTypes = {
        checked: [
            "radio",
            "checkbox"
        ],
        selected: [
            "option",
            "select-one",
            "select-multiple"
        ],
        value: [
            "button",
            "color",
            "date",
            "datetime",
            "datetime-local",
            "email",
            "hidden",
            "month",
            "number",
            "password",
            "range",
            "reset",
            "search",
            "submit",
            "tel",
            "text",
            "textarea",
            "time",
            "url",
            "week"
        ]
    };

    /**
     * Get the property to update on an element being updated.
     *
     * @param element The DOM element to get the property for.
     * @returns The name of the property to update if element is supported, otherwise `undefined`.
     */
    function getPropertyToUpdate( element ) {
        var type = getElementType( element );
        var elementProperty = undefined;

        $.each( updateTypes, function( property, types ) {
            if ( $.inArray( type, types ) > -1 ) {
                elementProperty = property;
                return false;
            }
        });

        return elementProperty;
    }

    /**
     * Update the element based on the provided data.
     *
     * @param element The DOM element to update.
     * @param elementIndex The index of this element in the list of elements with the same name.
     * @param value The serialized element value.
     * @param valueIndex The index of the value in the list of values for elements with the same name.
     * @param callback A function to call if the value of an element was updated.
     */
    function update( element, elementIndex, value, valueIndex, callback ) {
        var property = getPropertyToUpdate( element );

        // Handle value inputs
        // If there are multiple value inputs with the same name, they will be populated by matching indexes.
        if ( property == "value" && elementIndex == valueIndex ) {
            element.value = value;
            callback.call( element, value );

            // Handle select menus, checkboxes and radio buttons
        } else if ( property == "checked" || property == "selected" ) {
            var fields = [];

            // Extract option fields from select menus
            if ( element.options ) {
                $.each( element.options, function( index, option ) {
                    fields.push( option );
                });

            } else {
                fields.push( element );
            }

            // #37: Remove selection from multiple select menus before deserialization
            if ( element.multiple && valueIndex == 0 ) {
                element.selectedIndex = -1;
            }

            $.each( fields, function( index, field ) {
                if ( field.value == value ) {
                    field[ property ] = true;
                    callback.call( field, value );
                }
            });
        }
    }

    /**
     * Default plugin options.
     *
     * @type {object}
     */
    var defaultOptions = {
        change: $.noop,
        complete: $.noop
    };

    /**
     * The $.deserialize function.
     *
     * @param data The data to deserialize.
     * @param options Additional options.
     * @returns {jQuery} The jQuery object that was provided to the plugin.
     */
    $.fn.deserialize = function( data, options ) {

        // Backwards compatible with old arguments: data, callback
        if ( $.isFunction( options ) ) {
            options = { complete: options };
        }

        options = $.extend( defaultOptions, options || {} );
        data = normalizeData( data );

        var elementsByName = getFieldsByName( this, options.filter );

        $.each( data, function( name, values ) {
            $.each( elementsByName[ name ], function( elementIndex, element ) {
                $.each( values, function( valueIndex, value ) {
                    update( element, elementIndex, value, valueIndex, options.change );
                });
            });
        });

        options.complete.call( this );

        return this;
    };
}));
// Local
const $dataTables = $('table.table-datatable');

$dataTables.each(function (i) {

    let order = [[0, 'asc']];
    let pageLength = 100;
    let paging = true;
    let ordering = true;

    // Limit
    const limit = $(this).attr('data-limit');
    if (limit > 0) {
        pageLength = Number(limit);
    }

    // Ordering
    const noSort = $(this).attr('data-no-sort');
    if (noSort) {
        ordering = false;
    }

    // Paging
    if ($(this).find('tbody tr').length <= pageLength) {
        paging = false;
    }

    // Sort
    const tableSort = $(this).attr('data-sort');
    if (tableSort) {

        order = eval(tableSort);

    } else {

        const $column = $(this).find('thead tr th[data-sort]');
        if ($column.length > 0) {

            const index = $column.index();
            const sort = $column.attr('data-sort');

            order = [[index, sort]];
        }
    }

    // Find
    const disabled = [];
    $(this).find('thead tr th[data-disabled]').each(function (i) {
        disabled.push($(this).index());
    });

    // Init
    $(this).DataTable({
        "pageLength": pageLength,
        "order": order,
        "paging": paging,
        "ordering": ordering,
        "fixedHeader": true,
        "info": false,
        "searching": true,
        "search": {
            "smart": true
        },
        "autoWidth": false,
        "lengthChange": false,
        "stateSave": false,
        "dom": '<"dt-pagination"p>t<"dt-pagination"p>',
        "columnDefs": [
            {
                "targets": disabled,
                "orderable": false
            }
        ],
        "drawCallback": function (settings, json) {

            const api = this.api();
            if (api.page.info().pages <= 1) {
                $(this).parent().find('.dt-pagination').hide();
            }
        },
        "initComplete": function (settings, json) {

            $('table.table-datatable').on('order.dt', function (e, settings, processing) {

                $('#live-badge').trigger('click');

            });
        }
    });

});

// Local search
const $searchField = $('input#search');
$searchField.on('keyup', function (e) {
    $dataTables.DataTable().search($(this).val()).draw();
});

$searchField.on('keyup', function (e) {
    if ($(this).val() && e.key === "Escape") {
        $(this).val('');
        $dataTables.DataTable().search($(this).val()).draw();
    }
});

// Local events
$dataTables.on('page.dt', function (e, settings, processing) {

    const top = $(this).prev().offset().top - 15;
    $('html, body').animate({scrollTop: top}, 200);

});

// Server side
const dtDefaultOptions = {
    "ajax": function (data, callback, settings) {

        delete data.columns;
        delete data.length;
        delete data.search.regex;

        $.ajax({
            url: $(this).attr('data-path'),
            data: data,
            success: callback,
            dataType: 'json',
            cache: $(this).attr('data-cache') !== "false"
        });
    },
    "processing": false,
    "serverSide": true,
    "pageLength": 100,
    "fixedHeader": true,
    "paging": true,
    "ordering": true,
    "info": false,
    "searching": true,
    "autoWidth": false,
    "lengthChange": false,
    "stateSave": false,
    "orderMulti": false,
    "dom": '<"dt-pagination"p>t<"dt-pagination"p>',
    "language": {
        "processing": '<i class="fas fa-spinner fa-spin fa-3x fa-fw"></i>'
    },
    "drawCallback": function (settings, json) {

        const api = this.api();
        if (api.page.info().pages <= 1) {
            $(this).parent().find('.dt-pagination').hide();
        }

        $(".paginate_button > a").on("focus", function () {
            $(this).blur(); // Fixes scrolling to pagination on every click
        });
    },
    "initComplete": function (settings, json) {

        $('table.table-datatable2').on('order.dt', function (e, settings, processing) {

            $('#live-badge').trigger('click');

        });
    }
};

// Server side events
$('table.table-datatable2').on('page.dt search.dt', function (e, settings, processing) {

    $(this).fadeTo(500, 0.3);

    if (e.type === 'page') {

        const top = $(this).prev().offset().top - 15;
        $('html, body').animate({scrollTop: top}, 500);
    }

}).on('draw.dt', function (e, settings, processing) {

    $(this).fadeTo(100, 1);
    highLightOwnedGames();

});

// Lock icon
const $lockIcon = '<i class="fa fa-lock text-muted" data-toggle="tooltip" data-placement="left" title="Private"></i>';

//
function addDataTablesRow(options, data, limit, $table) {

    let $row = $('<tr class="fade-green" />');
    options.createdRow($row[0], data, null);

    if (isIterable(options.columnDefs)) {
        for (const v of options.columnDefs) {

            let value = data[v];

            if ('render' in v) {
                value = v.render(null, null, data);
            }

            const $td = $('<td />').html(value);

            if ('createdCell' in v) {
                v.createdCell($td[0], null, data, null, null); // todo, this [0] may not be needed
            }

            $td.find('[data-livestamp]').html('a few seconds ago');

            $row.append($td);
        }
    }


    $table.prepend($row);

    $table.find('tbody tr').slice(limit).remove();
}

if ($('#admin-page').length > 0) {

    //
    $('#player-id').val(user.userID);

    //
    const $actions = $('#actions a');

    $actions.on('click', function () {
        return confirm('Are you sure?');
    });

    const queuesForm = $('form#queues');
    queuesForm.on("submit", function (e) {
        e.preventDefault();
        $.ajax({
            type: 'post',
            url: queuesForm.attr('action'),
            data: $(this).serialize()
        });
    });

    websocketListener('admin', function (e) {

        const data = $.parseJSON(e.data);
        toast(true, data.Data.message, '', 0);
    });
}

const $appPage = $('#app-page');

if ($appPage.length > 0) {

    const $modal = $('#news-modal');

    // Background
    const background = $('.container[data-bg]').attr('data-bg');
    if (background !== '') {
        $('body').css("background-image", 'url(' + background + ')');
    }

    // Fix links
    $('#news a').each(function () {

        const href = $(this).attr('href');
        if (href && !(href.startsWith('http'))) {
            $(this).attr('href', 'http://' + href);
        }
    });

    // Add hash when clicking row
    $('#news table.table').on('click', 'td', function (e) {
        history.pushState(undefined, undefined, '#news,' + $(this).closest('tr').attr('data-id'));
        showArt();
    });

    // Remove hash when closing modal
    $modal.on('hidden.bs.modal', function (e) {
        history.pushState("", document.title, "#news");
        showArt();
    });

    // News modal
    $(window).on('hashchange', showArt);
    $(document).on('draw.dt', showArt);

    // Link to dev tabs
    $(document).ready(function (e) {
        const hash = window.location.hash;
        if (hash.startsWith('#dev-')) {
            $('a.nav-link[href="#dev"]').tab('show');
            $('a.nav-link[href="' + hash + '"]').tab('show');
            window.location.hash = hash;
        }
    });

    // Detials image click
    $('#details img').on('click', function () {
        $('.card-header-tabs a[href="#media"]').tab('show');
    });

    function showArt() {

        const split = window.location.hash.split(',');

        // If the hash has a news ID
        if (split.length === 2 && (split[0] === 'news' || split[0] === '#news') && split[1]) {

            let $art = $('tr[data-id=' + split[1] + ']').find('.d-none').html();
            $art = $("<div />").html($art).text(); // Decode HTML
            $modal.find('.modal-body').html($art);
            $modal.modal('show');

        } else {
            $modal.modal('hide');
        }
    }

    // Details tab image
    $("#details img").on("error", function () {
        $(this).attr('src', '/assets/img/no-app-image-banner.jpg');
        $(this).hide();
    });

    // Websockets
    websocketListener('app', function (e) {

        const data = $.parseJSON(e.data);
        if (data.Data.toString() === $appPage.attr('data-id')) {
            toast(true, 'Click to refresh', 'This app has been updated', 0, 'refresh');
        }

    });

    // News data table
    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[2, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
        },
        "columnDefs": [
            // Title
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<div><i class="fas fa-newspaper"></i> ' + row[1] + '</div><div class="d-none">' + row[5] + '</div>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('article-title');
                },
                "orderable": false
            },
            // Author
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[2];
                },
                "orderable": false
            },
            // Date
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[4] + '" data-livestamp="' + row[3] + '"></span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    }));
}

if ($('#apps-page').length > 0) {

    $('#user-currency-symbol').append(' ' + user.currencySymbol);

    const $chosens = $('select.form-control-chosen');
    const $table = $('table.table-datatable2');
    const $form = $('form');

    // Set form fields from URL
    if (window.location.search) {
        $form.deserialize(window.location.search.substr(1));
    }

    // Setup drop downs
    $chosens.chosen({
        disable_search_threshold: 10,
        allow_single_deselect: true,
        rtl: false,
        max_selected_options: 10
    });

    // Setup Sliders
    const priceLow = $('#price-low').val();
    const priceHigh = $('#price-high').val();
    const priceElement = $('#price-slider')[0];
    const priceMax = $(priceElement).attr('data-max');
    const priceSlider = noUiSlider.create(priceElement, {
        start: [
            parseInt(priceLow ? priceLow : 0),
            parseInt(priceHigh ? priceHigh : priceMax)
        ],
        connect: true,
        step: 1,
        range: {
            'min': 0,
            'max': parseInt(priceMax ? priceMax : 101) // Default if can't read the real max
        }
    });

    const scoreLow = $('#score-low').val();
    const scoreHigh = $('#score-high').val();
    const scoreElement = $('#score-slider')[0];
    const scoreSlider = noUiSlider.create(scoreElement, {
        start: [
            parseInt(scoreLow ? scoreLow : 0),
            parseInt(scoreHigh ? scoreHigh : 100)
        ],
        connect: true,
        step: 1,
        range: {
            'min': 0,
            'max': 100
        }
    });

    // Form changes
    $chosens.on('change', redrawTable);
    $form.on('submit', redrawTable);
    priceSlider.on('set', onPriceChange);
    priceSlider.on('update', updateLabels);
    scoreSlider.on('set', onScoreChange);
    scoreSlider.on('update', updateLabels);

    function onPriceChange(e) {
        const prices = priceSlider.get();
        $('#price-low').val(prices[0]);
        $('#price-high').val(prices[1]);
        redrawTable();
    }

    function onScoreChange(e) {
        const scores = scoreSlider.get();
        $('#score-low').val(scores[0]);
        $('#score-high').val(scores[1]);
        redrawTable();
    }

    function redrawTable(e) {

        // Filter out empty form fields
        let formData = $form.serializeArray();
        formData = $.grep(formData, function (v) {
            return v.value !== "";
        });

        $table.DataTable().draw();
        history.pushState({}, document.title, "/apps?" + $.param(formData));
        updateLabels(e);
        return false;
    }

    $(document).ready(updateLabels);

    function updateLabels(e) {

        const prices = priceSlider.get();
        const scores = scoreSlider.get();

        if (prices[0] === prices[1]) {
            $('label#price-label').html('Price (' + user.currencySymbol + Math.round(prices[0]) + ')');
        } else {
            $('label#price-label').html('Price (' + user.currencySymbol + Math.round(prices[0]) + ' - ' + user.currencySymbol + Math.round(prices[1]) + ')');
        }

        if (scores[0] === scores[1]) {
            $('label#score-label').html('Score (' + Math.round(scores[0]) + '%)');
        } else {
            $('label#score-label').html('Score (' + Math.round(scores[0]) + '% - ' + Math.round(scores[1]) + '%)');
        }
    }

    // Setup datatable
    $table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            data.search.tags = $('#tags').val();
            data.search.genres = $('#genres').val();
            data.search.developers = $('#developers').val();
            data.search.publishers = $('#publishers').val();
            data.search.platforms = $('#platforms').val();
            data.search.types = $('#types').val();
            data.search.search = $('#search').val();
            data.search.prices = priceSlider.get();
            data.search.scores = scoreSlider.get();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[2, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                }
            },
            // Type
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "orderable": false
            },
            // Score
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[5] + '%';
                }
            },
            // Price
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[6];
                }
            },
            // Updated At
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<span data-livestamp="' + row[7] + '"></span>';
                }
            }
        ]
    }));
}

if ($('#changes-page').length > 0) {

    const options = $.extend(true, {}, dtDefaultOptions, {
        "order": [[0, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[5]);
        },
        "columnDefs": [
            // Change ID
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return 'Change ' + row[0];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Date
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[2] + '" data-livestamp="' + row[1] + '"></span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Apps
            {
                "targets": 2,
                "render": function (data, type, row) {

                    let apps = [];
                    if (isIterable(Array)) {
                        for (const v of row[3]) {
                            if (v.name === '') {
                                apps.push('Unknown App');
                            } else {
                                apps.push('<a href="/apps/' + v.id + '">' + v.name + '</a>');
                            }
                        }
                    }

                    return apps.join('<br/>');
                },
                "orderable": false
            },
            // Packages
            {
                "targets": 3,
                "render": function (data, type, row) {

                    let packages = [];
                    if (isIterable(row[4])) {
                        for (const v of row[4]) {
                            if (v.name === '') {
                                packages.push('Unknown Package');
                            } else {
                                packages.push('<a href="/packages/' + v.id + '">' + v.name + '</a>');
                            }
                        }
                    }


                    return packages.join('<br/>');
                },
                "orderable": false
            }
        ]
    });

    const $table = $('table.table-datatable2');
    const dt = $table.DataTable(options);

    websocketListener('changes', function (e) {

        const info = dt.page.info();
        if (info.page === 0) { // Page 1

            const data = $.parseJSON(e.data);

            // Loop changes in websocket data and add each one
            if (isIterable(data.Data)) {
                for (const v of data.Data) {
                    addDataTablesRow(options, v, info.length, $table);
                }
            }
        }
    });
}

if ($('#chat-page').length > 0) {

    const channel = $('[data-channel-id]').attr('data-channel-id');

    $.ajax({
        url: '/chat/' + channel + '/ajax',
        success: function (data, textStatus, jqXHR) {
            $('.fa-spin').remove();
            if (isIterable(data)) {
                for (const v of data) {
                    chatRow(v, false);
                }
            }
        },
        dataType: 'json',
        cache: false
    });

    websocketListener('chat', function (e) {

        const data = $.parseJSON(e.data);
        chatRow(data.Data);
    });

    function chatRow(data, addToTop = true) {

        const $container = $('ul[data-channel-id=' + data.channel + ']');

        $container.json2html(
            data,
            {
                '<>': 'li', 'class': 'media', 'html': [
                    {'<>': 'img', 'class': 'mr-3 rounded', 'src': 'https://cdn.discordapp.com/avatars/${author_id}/${author_avatar}.png?size=64', 'alt': '${author_user}'},
                    {
                        '<>': 'div', 'class': 'media-body', 'html': [
                            {
                                '<>': 'h5', 'class': function () {
                                    return 'mt-0 mb-1 rounded' + (addToTop ? ' fade-green' : '');
                                }, 'html': '${content}'
                            },
                            {'<>': 'p', 'class': 'text-muted', 'html': 'By ${author_user}'}
                        ]
                    }
                ]
            },
            {
                prepend: addToTop,
            }
        );

        $container.find('li').slice(50).remove();
    }
}

if ($('#contact-page').length > 0) {

    const $name = $('#name');
    const $email = $('#email');
    const $message = $('#message');

    $name.val(user.session['login-name']);
    $email.val(user.session['login-email']);
    $message.val(user.session['login-message']);

    if (!$email.val()) {
        $email.val(user.userEmail);
    }

}

if ($('#coop-page').length > 0) {

    if (user.isLoggedIn) {
        $('#addme').removeClass('d-none')
    }

    $('form#add').submit(function (e) {

        e.preventDefault();

        let url = '';

        const val = $('input#id').val();

        if (document.location.href.indexOf("?") >= 0) {
            url = document.location.href + "&p=" + val;
        } else {
            url = document.location.href + "?p=" + val;
        }

        document.location = url;
    });

    $('#addme input').click(function (e) {

        $('input#id').val(user.userID);
        $('form#add').submit();
    });
}

if ($('#experience-page').length > 0) {

    const $from = $('#from');
    const $to = $('#to');

    if (user.isLoggedIn) {
        $('.lead span').html('You are level <a href="/experience/' + user.userLevel + '" data-level="' + user.userLevel + '">' + user.userLevel + '</a>.');

        $from.val(user.userLevel);
        $to.val(user.userLevel + 10)
    } else {
        $from.val(10);
        $to.val(20)
    }

    // Scroll to number
    function scroll() {

        if (typeof scrollTo === 'string') {

            const top = $(scrollTo).offset().top - 100;
            $('html, body').animate({scrollTop: top}, 500);

            $('tr').removeClass('table-success');
            $(scrollTo).addClass('table-success');
        }
    }

    $("#experience-page").on("click", "[data-level]", function () {

        const level = $(this).attr('data-level');

        if (history.pushState) {
            history.pushState('data', '', '/experience/' + level);
        }

        scrollTo = 'tr[data-level=' + level + ']';
        scroll();

        return false;
    });

    // Calculator
    function levelToXP(level) {

        let total = 0;

        for (let current = 0; current <= level; current++) {
            total += Math.ceil(current / 10) * 100;
        }

        return total;
    }

    function update() {

        const answer = $('#answer');
        answer.val('Loading..');

        let from = $('#from').val();
        if (from < 1) {
            from = 1;
        }

        let to = $('#to').val();
        if (to < 1) {
            to = 1;
        }

        answer.val((levelToXP(to) - levelToXP(from)).toLocaleString());
    }

    $('#from, #to').change(update);

    $('#calculate').click(function (e) {
        e.preventDefault();
        update();
        return false;
    });

    $(document).ready(scroll);
    $(document).ready(update);
}

if ($('#free-games-page').length > 0) {

    const table = $('table.table-datatable2');

    $('#types input:checkbox').change(function () {

        table.DataTable().draw();

    });

    table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            data.search.types = $('#types input:checkbox:checked').map(function () {
                return $(this).val();
            }).get();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[1, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[7]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                }
            },
            // Score
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[3] + '%';
                }
            },
            // Type
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[4];
                },
                "orderable": false
            },
            // Platform
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('platforms platforms-align')
                },
                "orderable": false
            },
            // Install link
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<a href="' + row[6] + '">Install</a>';
                },
                "orderable": false
            }
        ]
    }));
}

const $document = $(document);
const $body = $("body");

// Data links
let dataLinkDrag = false;
let dataLinkX = 0;
let dataLinkY = 0;

// On document for elements that are created with JS
$document.on('mousedown', '[data-link]', function (e) {
    dataLinkX = e.screenX;
    dataLinkY = e.screenY;
    dataLinkDrag = false;
});

$document.on('mousemove', '[data-link]', function handler(e) {
    if (!dataLinkDrag && (Math.abs(dataLinkX - e.screenX) > 5 || Math.abs(dataLinkY - e.screenY) > 5)) {
        dataLinkDrag = true;
    }
});

$(document).on('mouseup', '[data-link]', function (e) {

    const link = $(this).attr('data-link');

    if (!link) {
        return true;
    }

    if (dataLinkDrag) {
        return true;
    }

    // Right click
    if (e.which === 3) {
        return true;
    }

    // Middle click
    if (e.ctrlKey || e.shiftKey || e.metaKey || e.which === 2) {
        window.open(link, '_blank');
        return true;
    }

    window.location.href = link;
    return true;
});

$('.stop-prop').on('click', function (e) {
    e.stopPropagation();
});

// Auto dropdowns
$('.navbar .dropdown').hover(
    function () {
        $(this).addClass("show").find('.dropdown-menu').addClass("show");
    }, function () {
        $(this).removeClass("show").find('.dropdown-menu').removeClass("show");
    }
).click(function (e) {
    e.stopPropagation();
});

// Tooptips
$body.tooltip({
    selector: '[data-toggle="tooltip"]'
});

// JSON fields
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

$('.json').each(function (i, value) {

    const json = $(this).text();

    if (isJson(json)) {
        const jsonObj = JSON.parse(json);
        $(this).text(JSON.stringify(jsonObj, null, '\t'));
    }
});

// Tabs
(function ($, window) {
    'use strict';

    // Choose tab from URL
    const hashes = window.location.hash;
    if (hashes) {
        hashes.split(',').map(function (hash) {
            $('.nav-link[href="' + hash + '"]').tab('show');
        });
    }

    // Set URL from tab
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        const hash = $(e.target).attr('href');
        if (history.pushState) {
            history.pushState(null, null, hash);
        } else {
            location.hash = hash;
        }
    });

})(jQuery, window);


// Scroll to top link
const $top = $("#top");

$(window).on('scroll', function (e) {

    if ($(window).scrollTop() >= 1000) {
        $top.addClass("show");
    } else {
        $top.removeClass("show");
    }
});

$top.click(function (e) {
    $('html, body').animate({scrollTop: 0}, 500);
});

// Highlight owned games
function highLightOwnedGames() {
    let games = localStorage.getItem('games');
    if (games != null) {
        games = JSON.parse(games);
        if (games != null) {
            $('[data-app-id]').each(function () {
                const id = $(this).attr('data-app-id');
                if (games.indexOf(parseInt(id)) !== -1) {
                    $(this).addClass('font-weight-bold')
                }
            });
        }
    }
}

highLightOwnedGames();

// Websocket helper
function websocketListener(page, onMessage) {

    if (window.WebSocket === undefined) {

        toast(false, 'Your browser does not support websockets');

    } else {

        const socket = new WebSocket(((location.protocol === 'https:') ? "wss://" : "ws://") + location.host + "/websocket/" + page);
        const $badge = $('#live-badge');

        socket.onopen = function (e) {
            $badge.addClass('badge-success').removeClass('badge-secondary badge-danger');
            console.log('Websocket opened');
        };

        socket.onclose = function (e) {
            $badge.addClass('badge-danger').removeClass('badge-secondary badge-success');
            toast(false, 'Live functionality has stopped');
            console.log('Websocket closed');
        };

        socket.onerror = function (e) {
            $badge.addClass('badge-danger').removeClass('badge-secondary badge-success');
            toast(false, 'Live functionality has stopped');
        };

        socket.onmessage = onMessage;

        $badge.on('click', function (e) {
            if ($(this).hasClass('cursor-pointer')) {
                socket.close(1000);
                $badge.addClass('badge-danger').removeClass('badge-secondary badge-success cursor-pointer');
                toast(false, 'Live functionality has stopped');
            }
        });
    }
}

// Ads
if (user.showAds) {

    window.CHITIKA = {
        'units': [
            {"calltype": "async[2]", "publisher": "jleagle", "width": 160, "height": 600, "sid": "gamedb-right"},
            {"calltype": "async[2]", "publisher": "jleagle", "width": 160, "height": 600, "sid": "gamedb-left"},
            {"calltype": "async[2]", "publisher": "jleagle", "width": 728, "height": 90, "sid": "gamedb-top-big"},
            {"calltype": "async[2]", "publisher": "jleagle", "width": 320, "height": 50, "sid": "gamedb-top-small"}
        ]
    };

    $('div.container').eq(1)
        .prepend('<div class="ad-right d-none d-xl-block" id="chitikaAdBlock-0"></div>')
        .prepend('<div class="ad-left d-none d-xl-block" id="chitikaAdBlock-1"></div>');
    $('#ad-top')
        .prepend('<div class="ad-top-big d-none d-lg-block d-xl-none" id="chitikaAdBlock-2"></div>')
        .prepend('<div class="ad-top-small d-block d-lg-none" id="chitikaAdBlock-3"></div>');
}

// Toasts
if (isIterable(user.toasts)) {
    for (const v of user.toasts) {
        toast(v.success, v.message, v.title, v.timeout, v.link);
    }
}

function toast(success = true, body, title = '', timeout = 0, link = '') {

    const redirect = function () {
        if (link === 'refresh') {
            link = window.location.href;
        }
        window.location.replace(link);

    };

    const options = {
        timeOut: Number(timeout > 0 ? timeout : 8) * 1000,
        onclick: link ? redirect : null,

        newestOnTop: true,
        preventDuplicates: false,
        extendedTimeOut: 0, // Keep alive on hover
    };

    if (success) {
        toastr.success(body, title, options);
    } else {
        toastr.error(body, title, options);
    }

}

function isIterable(obj) {
    // checks for null and undefined
    if (obj == null) {
        return false;
    }
    return typeof obj[Symbol.iterator] === 'function';
}

// Flag
const flag = $('<img src="/assets/img/flags/' + user.country.toLowerCase() + '.png" alt="' + user.country + '">');
if (user.isLoggedIn) {
    $('#header-flag').html(flag);
} else {
    $('#header-flag').html('<a href="/login">' + flag.prop('outerHTML') + '</a>');
}

// Admin link
if (user.isAdmin) {
    $('#header-admin').html('<a class="nav-link" href="/admin">Admin</a>');
}

// User link
const $headerUser = $('#header-user');
const $headerSettings = $('#header-settings');

if (user.isLoggedIn) {
    $headerUser.html('<a class="nav-link" href="/players/' + user.userID + '">' + user.userName + '</a>');

    $headerSettings.prepend('<div class="dropdown-divider"></div>');
    $headerSettings.prepend('<a class="dropdown-item" href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>');
    $headerSettings.prepend('<a class="dropdown-item" href="/settings"><i class="fas fa-cog"></i> Settings</a>');
} else {
    $headerUser.html('<a class="nav-link" href="/login">Login</a>');
}

// Flashes
if (isIterable(user.flashesGood)) {
    let $flashesGood = $('#flashes-good');
    for (const v of user.flashesGood) {
        $flashesGood.append('<p>' + v + '</p>');
        $flashesGood.removeClass('d-none');
    }
}

if (isIterable(user.flashesBad)) {
    let $flashesBad = $('#flashes-bad');
    for (const v of user.flashesBad) {
        $flashesBad.append('<p>' + v + '</p>');
        $flashesBad.removeClass('d-none');
    }
}

if ($('#login-page').length > 0) {

    $('#email').val(user.session['login-email']);

}

if ($('#news-page').length > 0) {

    const $modal = $('#news-modal');

    // Add hash when clicking row
    $('table.table').on('click', '.article-title', function (e) {
        history.pushState(undefined, undefined, '#' + $(this).closest('tr').attr('data-id'));
        showArt();
    });

    // Remove hash when closing modal
    $modal.on('hidden.bs.modal', function (e) {
        history.pushState("", document.title, window.location.pathname + window.location.search);
        showArt();
    });

    // News modal
    $(window).on('hashchange', showArt);
    $(document).on('draw.dt', showArt);

    function showArt() {

        const hash = window.location.hash.replace('#', '');
        if (hash) {

            let $art = $('tr[data-id=' + hash + ']').find('.d-none').html();
            $art = $("<div />").html($art).text(); // Decode HTML
            $modal.find('.modal-body').html($art);
            $modal.modal('show');

        } else {
            $modal.modal('hide');
        }
    }

    // Data tables
    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[2, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
        },
        "columnDefs": [
            // Game
            {
                "targets": 0,
                "render": function (data, type, row) {

                    // Icon URL
                    if (row[8]) {
                        row[8] = 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/' + row[6] + '/' + row[8] + '.jpg';
                    } else {
                        row[8] = '/assets/img/no-app-image-square.jpg';
                    }

                    return '<img src="' + row[8] + '" class="rounded square" alt="' + row[7] + '" onError="this.onerror=null;this.src=\'/assets/img/no-app-image-square.jpg\';"><span data-app-id="' + row[6] + '">' + row[7] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-link', rowData[9]);
                },
                "orderable": false
            },
            // Title
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<span>' + row[1] + '</span><div class="d-none">' + row[5] + '</div>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('article-title');
                    $(td).attr('data-link', '');
                },
                "orderable": false
            },
            // Date
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[4] + '" data-livestamp="' + row[3] + '"></span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    }));
}

const $packagePage = $('#package-page');

if ($packagePage.length > 0) {

    // Link to dev tabs
    $(document).ready(function (e) {
        const hash = window.location.hash;
        if (hash.startsWith('#dev-')) {
            $('a.nav-link[href="#dev"]').tab('show');
            $('a.nav-link[href="' + hash + '"]').tab('show');
            window.location.hash = hash;
        }
    });

    // Websockets
    websocketListener('package', function (e) {

        const data = $.parseJSON(e.data);
        if (data.Data.toString() === $packagePage.attr('data-id')) {
            toast(true, 'Click to refresh', 'This package has been updated', 0, 'refresh');
        }

    });
}

if ($('#packages-page').length > 0) {

    const options = $.extend(true, {}, dtDefaultOptions, {
        "order": [[4, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[1]);
        },
        "columnDefs": [
            // Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[8] + '" class="rounded square" alt="' + row[2] + '"><span>' + row[2] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img')
                },
            },
            // Coming Soon
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[3];
                },
                "orderable": false
            },
            // Apps
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[4].toLocaleString();
                }
            },
            // Price
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                }
            },
            // Updated Time
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[7] + '" data-livestamp="' + row[6] + '">' + row[7] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                }
            }
        ]
    });

    const $table = $('table.table-datatable2');
    const dt = $table.DataTable(options);

    websocketListener('packages', function (e) {

        const info = dt.page.info();
        if (info.page === 0) { // Page 1

            const data = $.parseJSON(e.data);
            addDataTablesRow(options, data.Data, info.length, $table);
        }
    });
}

const $playerPage = $('#player-page');

if ($playerPage.length > 0) {

    // Add user ID to coop link
    if (user.isLoggedIn) {
        const $coop = $('#coop-link');
        $coop.attr('href', $coop.attr('href') + '&p=' + user.userID);
    }

    // Update link
    $('[data-update-id]').on('click', function (e) {

        const $link = $(this);

        $('i', $link).addClass('fa-spin');

        $.ajax({
            url: '/players/' + $(this).attr('data-update-id') + '/ajax/update',
            success: function (data, textStatus, jqXHR) {

                toast(data.success, data.message);

                $('i', $link).removeClass('fa-spin');

                if (data.error) {
                    console.log(data.error);
                }
            },
            dataType: 'json',
            cache: false
        });

        return false;
    });

    // Websockets
    websocketListener('profile', function (e) {

        const data = $.parseJSON(e.data);
        if (data.Data.toString() === $playerPage.attr('data-id')) {
            toast(true, 'Click to refresh', 'This player has been updated', 0, 'refresh');
        }

    });

    $('#games table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[2, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[7]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img').attr('data-app-id', rowData[0]);
                }
            },
            // Price
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[5];
                },
                "orderable": false
            },
            // Time
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[4];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                }
            },
            // Price/Time
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[6];
                },
                "orderable": false
            }
        ]
    }));

    if (heatMapData.length > 0) {

        $('#heatmap').height(120);

        function keyToLabel(key) {
            return '$' + (key * 5) + '-' + ((key * 5) + 5);
        }

        Highcharts.chart('heatmap', {
            chart: {
                type: 'heatmap'
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: [''],
                title: {
                    text: ''
                },
                labels: {
                    formatter: function () {
                        return keyToLabel(this.value);
                    }
                }
            },
            yAxis: {
                categories: [''],
                title: {
                    text: ''
                }
            },
            credits: {
                enabled: false
            },
            colorAxis: {
                min: 0,
                minColor: '#FFFFFF',
                maxColor: '#28a745'
            },
            legend: {
                enabled: false
            },
            tooltip: {
                formatter: function () {
                    return this.point.value.toLocaleString() + ' apps cost ' + keyToLabel(this.point.value);
                }
            },
            series: [{
                name: '',
                borderWidth: 0,
                color: '#000',
                data: heatMapData,
                dataLabels: {
                    enabled: false,
                    color: '#000000'
                }
            }]
        });
    }
}

if ($('#price-changes-page').length > 0) {

    const options = $.extend(true, {}, dtDefaultOptions, {
        "order": [[4, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[5]);

            let x = Math.min(data[9], 100); // Get a range of -100 to 100
            x += 100; // Get a range of 0 to 200
            x = x / 2; // Get a range of 0 to 100
            $(row).addClass('col-grad-' + Math.round(x));

            // if (data[12] > 0) {
            // $(row).addClass('table-danger');
            // } else if (data[12] < 0) {
            // $(row).addClass('table-success');
            // }
        },
        "columnDefs": [
            // App/Package Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[4] + '" class="rounded square" alt="' + row[3] + '"><span>' + row[3] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img').attr('data-app-id', 0)
                },
                "orderable": false
            },
            // Before
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[6];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // After
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[7];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Change
            {
                "targets": 3,
                "render": function (data, type, row) {

                    const small = '<small>' + row[9] + '%</small>';

                    if (row[9] === 0) {
                        return row[8];
                    }

                    return row[8] + ' ' + small;
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Time
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[10] + '" data-livestamp="' + row[11] + '">' + row[10] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    });

    const $table = $('table.table-datatable2');
    const dt = $table.DataTable(options);

    websocketListener('prices', function (e) {

        const info = dt.page.info();
        if (info.page === 0) { // Page 1

            const data = $.parseJSON(e.data);
            addDataTablesRow(options, data.Data, info.length, $table);
        }
    });
}

if ($('#product-keys-page').length > 0) {

    const $table = $('table.table-datatable2');

    // Setup datatable
    $table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            data.search.key = $('#key').val();
            data.search.value = $('#value').val();
            data.search.type = $("input[name=type]:checked").val();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[0, 'asc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                }
            },
            // Value
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "orderable": false
            },
        ]
    }));
}

const $priceChart = $('#app-page #prices-chart, #package-page #prices-chart');

if ($priceChart.length > 0) {

    let chart, request;

    function upateChart(code) {

        // Cancel any current requests
        if (request) {
            request.abort();
        }

        // Update rows
        $('tr[data-code]').removeClass('font-weight-bold');
        $('tr[data-code=' + code + ']').addClass('font-weight-bold');

        // Show loading screen
        chart.showLoading();

        request = $.ajax({
            type: "GET",
            data: {
                code: code
            },
            url: $priceChart.attr('data-ajax'),
            success: function (data, textStatus, jqXHR) {

                chart.series[0].setData(data.prices);
                chart.yAxis[0].update({title: {text: 'Price (' + data.symbol + ')'}});
                chart.hideLoading();
            },
            dataType: 'json',
            cache: true
        });
    }

    $('#prices table tr').on('click', function (e) {

        upateChart($(this).attr('data-code'));

    });

    chart = Highcharts.chart('prices-chart', {
        chart: {
            zoomType: 'x'
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Date'
            },
            type: 'datetime'
        },
        yAxis: {
            title: {
                text: 'Price ($)'
            },
            type: 'linear',
            min: 0,
            allowDecimals: true
        },
        legend: {
            enabled: false
        },
        credits: {
            enabled: false
        },
        series: [
            {
                type: 'line',
                name: 'Price',
                data: prices,
                step: 'right',
                color: '#28a745'
            }
        ],
        annotations: [{
            labelOptions: {
                backgroundColor: 'rgba(255,255,255,0.5)',
                verticalAlign: 'top',
                y: 15
            },
            labels: [{
                point: {
                    xAxis: 0,
                    yAxis: 0,
                    x: 27.98,
                    y: 255
                },
                text: 'Arbois'
            }, {
                point: {
                    xAxis: 0,
                    yAxis: 0,
                    x: 45.5,
                    y: 611
                },
                text: 'Montrond'
            }, {
                point: {
                    xAxis: 0,
                    yAxis: 0,
                    x: 63,
                    y: 651
                },
                text: 'Mont-sur-Monnet'
            }]
        }]
    });

    upateChart(user.country);
}

if ($('#queues-page').length > 0) {

    let activeWindow = true;

    $(window).on('focus', function () {
        activeWindow = true;
    });

    $(window).on('blur', function () {
        activeWindow = false;
    });

    function updateChart() {

        if (!activeWindow) {
            return;
        }

        $.ajax({
            url: '/queues/ajax.json',
            success: function (data, textStatus, jqXHR) {
                chart.series[0].setData(data.items);
                chart.series[1].setData(data.rate);
            },
            dataType: 'json',
            cache: false,
            error: function (xhr, ajaxOptions, thrownError) {
                clearTimeout(timer);
                $('#live-badge').addClass('badge-danger').removeClass('badge-secondary badge-success');
                toast(false, 'Live functionality has stopped');
            }
        });
    }

    updateChart();
    const timer = window.setInterval(updateChart, 10000); // 10 Seconds

    const chart = Highcharts.chart('chart', {
        chart: {
            animation: false
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        credits: {
            enabled: false
        },
        legend: {
            enabled: false
        },
        xAxis: {
            title: {
                text: 'Time'
            },
            labels: {
                step: 1,
                formatter: function () {
                    return moment(this.value).format("h:mm");
                },
            },
            type: 'datetime',
        },
        yAxis: [
            {
                title: {
                    text: 'Queue Size'
                },
                allowDecimals: false,
                min: 0,
            },
            {
                title: {
                    text: 'Queue Speed'
                },
                allowDecimals: false,
                min: 0,
                opposite: true,
            }
        ],
        plotOptions: {
            series: {
                marker: {
                    enabled: false // Too close together
                },
                animation: false
            }
        },
        series: [
            {
                color: '#28a745',
                yAxis: 0,
                name: 'size',
                type: 'areaspline',
            },
            {
                color: '#28a745',
                yAxis: 1,
                name: 'speed',
                type: 'spline'
            }
        ],
        tooltip: {
            formatter: function (x) {
                if (this.series.name === 'size') {
                    return this.y.toLocaleString() + ' items in the queue at ' + moment(this.key).format("h:mm");
                } else {
                    return this.y.toLocaleString() + ' items updated at ' + moment(this.key).format("h:mm");
                }
            },
        }
    });
}

if ($('#ranks-page').length > 0) {

    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[3, 'asc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[1]);
            $(row).attr('data-link', '/players/' + data[1]);
        },
        "columnDefs": [
            // Rank
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return row[0];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('font-weight-bold')
                },
                "orderable": false
            },
            // Player
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<img src="' + row[3] + '" class="rounded square" alt="' + row[2] + '"><span>' + row[2] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img')
                },
                "orderable": false
            },
            // Flag
            {
                "targets": 2,
                "render": function (data, type, row) {
                    if (row[11]) {
                        return '<img data-toggle="tooltip" data-placement="left" title="' + row[12] + '" src="' + row[11] + '" class="rounded" alt="' + row[12] + '">';
                    }
                    return '';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                },
                "orderable": false
            },
            // Avatar 2 / Level
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return '<div class="' + row[4] + ' square"></div><span>' + row[5].toLocaleString() + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img')
                }
            },
            // Games
            {
                "targets": 4,
                "render": function (data, type, row) {

                    if (row[6]) {
                        return row[6].toLocaleString();
                    }
                    return $lockIcon;
                }
            },
            // Badges
            {
                "targets": 5,
                "render": function (data, type, row) {
                    return row[7].toLocaleString();
                }
            },
            // Time
            {
                "targets": 6,
                "render": function (data, type, row) {

                    if (row[8] === '0m') {
                        return $lockIcon;
                    }

                    return row[8];
                },
                "createdCell": function (td, cellData, rowData, row, col) {

                    $(td).attr('nowrap', 'nowrap');

                    if (rowData[8] !== '0m') {
                        $(td).attr('data-toggle', 'tooltip').attr('data-placement', 'left').attr('title', rowData[9]);
                    }
                }
            },
            // Friends
            {
                "targets": 7,
                "render": function (data, type, row) {
                    return row[10].toLocaleString();
                }
            }
        ]
    }));
}
function recaptchaCallback(code) {

    $('form[data-recaptcha] button[type=submit]').prop("disabled", false);


    const inputs = $('form[data-recaptcha] input[type=text], form input[type=email], form textarea').filter(function () {
        return $(this).val() === '';
    });

    if (inputs.length > 0) {
        inputs.get(0).focus();
    } else {
        $('form[data-recaptcha]').submit();
    }
}

if ($('#settings-page').length > 0) {

    // Password
    $('input:password').pwstrength({
        ui: {
            showPopover: true,
            showErrors: true,
        },
        common: {
            usernameField: '#email'
        }
    });

    // Browser alert permissions
    // const $checkbox = $('#browser-alerts');
    //
    // $checkbox.on('click', function () {
    //     if ($(this).is(':checked')) {
    //
    //         Push.Permission.request(
    //             function () {
    //             },
    //             function () {
    //                 alert('You have denied notification access in your browser.');
    //                 $(this).prop("checked", false);
    //             }
    //         );
    //     }
    // });

    // Data tables
    $('#events table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[0, 'desc']],
        "columnDefs": [
            // Time
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[1] + '" data-livestamp="' + row[0] + '">' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Type
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<i class="fas ' + row[7] + '"></i> ' + row[2];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // IP
            {
                "targets": 2,
                "render": function (data, type, row) {

                    if (row[3] === row[6]) {
                        return '<span class="font-weight-bold" data-toggle="tooltip" data-placement="left" title="Your current IP">' + row[3] + '</span>';
                    }
                    return row[3];
                },
                "orderable": false
            },
            // User Agent
            {
                "targets": 3,
                "render": function (data, type, row) {
                    // return row[4];
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[4] + '">' + row[5] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    //$(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    }));
}

if ($('#stats-page').length > 0) {

    const columnDefaults = {
        chart: {
            type: 'column'
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        credits: {
            enabled: false
        },
        legend: {
            enabled: false
        },
        xAxis: {
            title: {
                text: ''
            },
            type: 'category'
        },
        yAxis: {
            allowDecimals: false,
            title: {
                text: ''
            }
        },
        series: [{
            color: '#28a745',
        }],
        plotOptions: {
            series: {
                pointPadding: 0,
                groupPadding: 0,
            }
        }
    };

    $.ajax({
        type: "GET",
        url: '/stats/app-scores',
        success: function (data, textStatus, jqXHR) {


            Highcharts.chart('scores', $.extend(true, {}, columnDefaults, {
                xAxis: {
                    tickInterval: 5,
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' apps have ' + this.x + '/100';
                    },
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    window.location.href = '/apps?score-low=' + this.x + '&score-high=' + (this.x + 1);
                                }
                            }
                        }
                    }
                },
                series: [{
                    data: data
                }]
            }));
        },
        dataType: 'json'
    });

    $.ajax({
        type: "GET",
        url: '/stats/app-types',
        success: function (data, textStatus, jqXHR) {

            Highcharts.chart('types', $.extend(true, {}, columnDefaults, {
                xAxis: {
                    labels: {
                        rotation: -20,
                    }
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' ' + this.key + ' apps';
                    },
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    console.log(this);
                                    window.location.href = '/apps?types=' + (this.name.toLowerCase());
                                }
                            }
                        }
                    }
                },
                series: [{
                    data: data,
                    dataLabels: {
                        enabled: true,
                        formatter: function () {
                            return this.y.toLocaleString();
                        }
                    }
                }]
            }));
        },
        dataType: 'json'
    });

    $.ajax({
        type: "GET",
        url: '/stats/ranked-countries',
        success: function (data, textStatus, jqXHR) {

            Highcharts.chart('countries', $.extend(true, {}, columnDefaults, {
                xAxis: {
                    tickInterval: 1,
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' ' + this.key + ' players';
                    },
                },
                series: [{
                    data: data,
                    dataLabels: {
                        enabled: true,
                        formatter: function () {
                            return this.y.toLocaleString();
                        }
                    }
                }]
            }));
        },
        dataType: 'json'
    });

    $.ajax({
        type: "GET",
        url: '/stats/release-dates',
        success: function (data, textStatus, jqXHR) {

            Highcharts.chart('release-dates', $.extend(true, {}, columnDefaults, {
                chart: {
                    type: 'area',
                },
                xAxis: {
                    type: 'datetime'
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' apps released on ' + moment(this.key).format("DD MMM YYYY");
                    },
                },
                series: [{
                    data: data
                }],
                plotOptions: {
                    area: {
                        lineWidth: 1,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                    }
                },
            }));
        },
        dataType: 'json'
    });
}

if ($('#upcoming-page').length > 0) {

    // $('table.table').on('init.dt', function (e) {
    //     const count = $(this).DataTable().page.info().recordsTotal;
    //     $('p.lead span').html(count);
    // });

    // Setup datatable
    $('table#apps').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[3, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                },
                "orderable": false
            },
            // App Type
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Price
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Release Date
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[6];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    }));

    $('table#packages').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[3, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                },
                "orderable": false
            },
            // Apps Count
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "orderable": false
            },
            // Price
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Release Date
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[6];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    }));
}
