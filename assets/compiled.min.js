/**
 * Copyright (C) 2017 Kyle Florence
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @website https://github.com/kflorence/jquery-deserialize/
 * @version 2.0.0-rc1
 *
 * Dual licensed under the MIT and GPLv2 licenses.
 */
(function( factory ) {
    if ( typeof module === "object" && module.exports ) {
        // Node/CommonJS
        module.exports = factory( require( "jquery" ) );

    } else {
        // Browser globals
        factory( window.jQuery );
    }
}(function( $ ) {

    /**
     * Updates a key/valueArray with the given property and value. Values will always be stored as arrays.
     *
     * @param prop The property to add the value to.
     * @param value The value to add.
     * @param obj The object to update.
     * @returns {object} Updated object.
     */
    function updateKeyValueArray( prop, value, obj ) {
        var current = obj[ prop ];

        if ( current === undefined ) {
            obj[ prop ] = [ value ];

        } else {
            current.push( value );
        }

        return obj;
    }

    /**
     * Get all of the fields contained within the given elements by name.
     *
     * @param $elements jQuery object of elements.
     * @param filter Custom filter to apply to the list of fields.
     * @returns {object} All of the fields contained within the given elements, keyed by name.
     */
    function getFieldsByName( $elements, filter ) {
        var elementsByName = {};

        // Extract fields from elements
        var fields = $elements
            .map(function convertFormToElements() {
                return this.elements ? $.makeArray( this.elements ) : this;
            })
            .filter( filter || ":input:not(:disabled)" )
            .get();

        $.each( fields, function( index, field ) {
            updateKeyValueArray( field.name, field, elementsByName );
        });

        return elementsByName;
    }

    /**
     * Figure out the type of an element. Input type will be used first, falling back to nodeName.
     *
     * @param element DOM element to check type of.
     * @returns {string} The element's type.
     */
    function getElementType( element ) {
        return ( element.type || element.nodeName ).toLowerCase();
    }

    /**
     * Normalize the provided data into a key/valueArray store.
     *
     * @param data The data provided by the user to the plugin.
     * @returns {object} The data normalized into a key/valueArray store.
     */
    function normalizeData( data ) {
        var normalized = {};
        var rPlus = /\+/g;

        // Convert data from .serializeObject() notation
        if ( $.isPlainObject( data ) ) {
            $.extend( normalized, data );

            // Convert non-array values into an array
            $.each( normalized, function( name, value ) {
                if ( !$.isArray( value ) ) {
                    normalized[ name ] = [ value ];
                }
            });

            // Convert data from .serializeArray() notation
        } else if ( $.isArray( data ) ) {
            $.each( data, function( index, field ) {
                updateKeyValueArray( field.name, field.value, normalized );
            });

            // Convert data from .serialize() notation
        } else if ( typeof data === "string" ) {
            $.each( data.split( "&" ), function( index, field ) {
                var current = field.split( "=" );
                var name = decodeURIComponent( current[ 0 ].replace( rPlus, "%20" ) );
                var value = decodeURIComponent( current[ 1 ].replace( rPlus, "%20" ) );
                updateKeyValueArray( name, value, normalized );
            });
        }

        return normalized;
    }

    /**
     * Map of property name -> element types.
     *
     * @type {object}
     */
    var updateTypes = {
        checked: [
            "radio",
            "checkbox"
        ],
        selected: [
            "option",
            "select-one",
            "select-multiple"
        ],
        value: [
            "button",
            "color",
            "date",
            "datetime",
            "datetime-local",
            "email",
            "hidden",
            "month",
            "number",
            "password",
            "range",
            "reset",
            "search",
            "submit",
            "tel",
            "text",
            "textarea",
            "time",
            "url",
            "week"
        ]
    };

    /**
     * Get the property to update on an element being updated.
     *
     * @param element The DOM element to get the property for.
     * @returns The name of the property to update if element is supported, otherwise `undefined`.
     */
    function getPropertyToUpdate( element ) {
        var type = getElementType( element );
        var elementProperty = undefined;

        $.each( updateTypes, function( property, types ) {
            if ( $.inArray( type, types ) > -1 ) {
                elementProperty = property;
                return false;
            }
        });

        return elementProperty;
    }

    /**
     * Update the element based on the provided data.
     *
     * @param element The DOM element to update.
     * @param elementIndex The index of this element in the list of elements with the same name.
     * @param value The serialized element value.
     * @param valueIndex The index of the value in the list of values for elements with the same name.
     * @param callback A function to call if the value of an element was updated.
     */
    function update( element, elementIndex, value, valueIndex, callback ) {
        var property = getPropertyToUpdate( element );

        // Handle value inputs
        // If there are multiple value inputs with the same name, they will be populated by matching indexes.
        if ( property == "value" && elementIndex == valueIndex ) {
            element.value = value;
            callback.call( element, value );

            // Handle select menus, checkboxes and radio buttons
        } else if ( property == "checked" || property == "selected" ) {
            var fields = [];

            // Extract option fields from select menus
            if ( element.options ) {
                $.each( element.options, function( index, option ) {
                    fields.push( option );
                });

            } else {
                fields.push( element );
            }

            // #37: Remove selection from multiple select menus before deserialization
            if ( element.multiple && valueIndex == 0 ) {
                element.selectedIndex = -1;
            }

            $.each( fields, function( index, field ) {
                if ( field.value == value ) {
                    field[ property ] = true;
                    callback.call( field, value );
                }
            });
        }
    }

    /**
     * Default plugin options.
     *
     * @type {object}
     */
    var defaultOptions = {
        change: $.noop,
        complete: $.noop
    };

    /**
     * The $.deserialize function.
     *
     * @param data The data to deserialize.
     * @param options Additional options.
     * @returns {jQuery} The jQuery object that was provided to the plugin.
     */
    $.fn.deserialize = function( data, options ) {

        // Backwards compatible with old arguments: data, callback
        if ( $.isFunction( options ) ) {
            options = { complete: options };
        }

        options = $.extend( defaultOptions, options || {} );
        data = normalizeData( data );

        var elementsByName = getFieldsByName( this, options.filter );

        $.each( data, function( name, values ) {
            $.each( elementsByName[ name ], function( elementIndex, element ) {
                $.each( values, function( valueIndex, value ) {
                    update( element, elementIndex, value, valueIndex, options.change );
                });
            });
        });

        options.complete.call( this );

        return this;
    };
}));
/**
 * sticky-sidebar - A JavaScript plugin for making smart and high performance.
 * @version v3.3.1
 * @link https://github.com/abouolia/sticky-sidebar
 * @author Ahmed Bouhuolia
 * @license The MIT License (MIT)
 **/
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.StickySidebar=e()}(this,function(){"use strict";"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function t(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function e(t,e){return t(e={exports:{}},e.exports),e.exports}var i=e(function(t,e){(function(t){Object.defineProperty(t,"__esModule",{value:!0});var l,n,e=function(){function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}}(),i=(l=".stickySidebar",n={topSpacing:0,bottomSpacing:0,containerSelector:!1,innerWrapperSelector:".inner-wrapper-sticky",stickyClass:"is-affixed",resizeSensor:!0,minWidth:!1},function(){function c(t){var e=this,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),this.options=c.extend(n,i),this.sidebar="string"==typeof t?document.querySelector(t):t,void 0===this.sidebar)throw new Error("There is no specific sidebar element.");this.sidebarInner=!1,this.container=this.sidebar.parentElement,this.affixedType="STATIC",this.direction="down",this.support={transform:!1,transform3d:!1},this._initialized=!1,this._reStyle=!1,this._breakpoint=!1,this.dimensions={translateY:0,maxTranslateY:0,topSpacing:0,lastTopSpacing:0,bottomSpacing:0,lastBottomSpacing:0,sidebarHeight:0,sidebarWidth:0,containerTop:0,containerHeight:0,viewportHeight:0,viewportTop:0,lastViewportTop:0},["handleEvent"].forEach(function(t){e[t]=e[t].bind(e)}),this.initialize()}return e(c,[{key:"initialize",value:function(){var i=this;if(this._setSupportFeatures(),this.options.innerWrapperSelector&&(this.sidebarInner=this.sidebar.querySelector(this.options.innerWrapperSelector),null===this.sidebarInner&&(this.sidebarInner=!1)),!this.sidebarInner){var t=document.createElement("div");for(t.setAttribute("class","inner-wrapper-sticky"),this.sidebar.appendChild(t);this.sidebar.firstChild!=t;)t.appendChild(this.sidebar.firstChild);this.sidebarInner=this.sidebar.querySelector(".inner-wrapper-sticky")}if(this.options.containerSelector){var e=document.querySelectorAll(this.options.containerSelector);if((e=Array.prototype.slice.call(e)).forEach(function(t,e){t.contains(i.sidebar)&&(i.container=t)}),!e.length)throw new Error("The container does not contains on the sidebar.")}"function"!=typeof this.options.topSpacing&&(this.options.topSpacing=parseInt(this.options.topSpacing)||0),"function"!=typeof this.options.bottomSpacing&&(this.options.bottomSpacing=parseInt(this.options.bottomSpacing)||0),this._widthBreakpoint(),this.calcDimensions(),this.stickyPosition(),this.bindEvents(),this._initialized=!0}},{key:"bindEvents",value:function(){window.addEventListener("resize",this,{passive:!0,capture:!1}),window.addEventListener("scroll",this,{passive:!0,capture:!1}),this.sidebar.addEventListener("update"+l,this),this.options.resizeSensor&&"undefined"!=typeof ResizeSensor&&(new ResizeSensor(this.sidebarInner,this.handleEvent),new ResizeSensor(this.container,this.handleEvent))}},{key:"handleEvent",value:function(t){this.updateSticky(t)}},{key:"calcDimensions",value:function(){if(!this._breakpoint){var t=this.dimensions;t.containerTop=c.offsetRelative(this.container).top,t.containerHeight=this.container.clientHeight,t.containerBottom=t.containerTop+t.containerHeight,t.sidebarHeight=this.sidebarInner.offsetHeight,t.sidebarWidth=this.sidebarInner.offsetWidth,t.viewportHeight=window.innerHeight,t.maxTranslateY=t.containerHeight-t.sidebarHeight,this._calcDimensionsWithScroll()}}},{key:"_calcDimensionsWithScroll",value:function(){var t=this.dimensions;t.sidebarLeft=c.offsetRelative(this.sidebar).left,t.viewportTop=document.documentElement.scrollTop||document.body.scrollTop,t.viewportBottom=t.viewportTop+t.viewportHeight,t.viewportLeft=document.documentElement.scrollLeft||document.body.scrollLeft,t.topSpacing=this.options.topSpacing,t.bottomSpacing=this.options.bottomSpacing,"function"==typeof t.topSpacing&&(t.topSpacing=parseInt(t.topSpacing(this.sidebar))||0),"function"==typeof t.bottomSpacing&&(t.bottomSpacing=parseInt(t.bottomSpacing(this.sidebar))||0),"VIEWPORT-TOP"===this.affixedType?t.topSpacing<t.lastTopSpacing&&(t.translateY+=t.lastTopSpacing-t.topSpacing,this._reStyle=!0):"VIEWPORT-BOTTOM"===this.affixedType&&t.bottomSpacing<t.lastBottomSpacing&&(t.translateY+=t.lastBottomSpacing-t.bottomSpacing,this._reStyle=!0),t.lastTopSpacing=t.topSpacing,t.lastBottomSpacing=t.bottomSpacing}},{key:"isSidebarFitsViewport",value:function(){var t=this.dimensions,e="down"===this.scrollDirection?t.lastBottomSpacing:t.lastTopSpacing;return this.dimensions.sidebarHeight+e<this.dimensions.viewportHeight}},{key:"observeScrollDir",value:function(){var t=this.dimensions;if(t.lastViewportTop!==t.viewportTop){var e="down"===this.direction?Math.min:Math.max;t.viewportTop===e(t.viewportTop,t.lastViewportTop)&&(this.direction="down"===this.direction?"up":"down")}}},{key:"getAffixType",value:function(){this._calcDimensionsWithScroll();var t=this.dimensions,e=t.viewportTop+t.topSpacing,i=this.affixedType;return e<=t.containerTop||t.containerHeight<=t.sidebarHeight?(t.translateY=0,i="STATIC"):i="up"===this.direction?this._getAffixTypeScrollingUp():this._getAffixTypeScrollingDown(),t.translateY=Math.max(0,t.translateY),t.translateY=Math.min(t.containerHeight,t.translateY),t.translateY=Math.round(t.translateY),t.lastViewportTop=t.viewportTop,i}},{key:"_getAffixTypeScrollingDown",value:function(){var t=this.dimensions,e=t.sidebarHeight+t.containerTop,i=t.viewportTop+t.topSpacing,n=t.viewportBottom-t.bottomSpacing,o=this.affixedType;return this.isSidebarFitsViewport()?t.sidebarHeight+i>=t.containerBottom?(t.translateY=t.containerBottom-e,o="CONTAINER-BOTTOM"):i>=t.containerTop&&(t.translateY=i-t.containerTop,o="VIEWPORT-TOP"):t.containerBottom<=n?(t.translateY=t.containerBottom-e,o="CONTAINER-BOTTOM"):e+t.translateY<=n?(t.translateY=n-e,o="VIEWPORT-BOTTOM"):t.containerTop+t.translateY<=i&&0!==t.translateY&&t.maxTranslateY!==t.translateY&&(o="VIEWPORT-UNBOTTOM"),o}},{key:"_getAffixTypeScrollingUp",value:function(){var t=this.dimensions,e=t.sidebarHeight+t.containerTop,i=t.viewportTop+t.topSpacing,n=t.viewportBottom-t.bottomSpacing,o=this.affixedType;return i<=t.translateY+t.containerTop?(t.translateY=i-t.containerTop,o="VIEWPORT-TOP"):t.containerBottom<=n?(t.translateY=t.containerBottom-e,o="CONTAINER-BOTTOM"):this.isSidebarFitsViewport()||t.containerTop<=i&&0!==t.translateY&&t.maxTranslateY!==t.translateY&&(o="VIEWPORT-UNBOTTOM"),o}},{key:"_getStyle",value:function(t){if(void 0!==t){var e={inner:{},outer:{}},i=this.dimensions;switch(t){case"VIEWPORT-TOP":e.inner={position:"fixed",top:i.topSpacing,left:i.sidebarLeft-i.viewportLeft,width:i.sidebarWidth};break;case"VIEWPORT-BOTTOM":e.inner={position:"fixed",top:"auto",left:i.sidebarLeft,bottom:i.bottomSpacing,width:i.sidebarWidth};break;case"CONTAINER-BOTTOM":case"VIEWPORT-UNBOTTOM":var n=this._getTranslate(0,i.translateY+"px");e.inner=n?{transform:n}:{position:"absolute",top:i.translateY,width:i.sidebarWidth}}switch(t){case"VIEWPORT-TOP":case"VIEWPORT-BOTTOM":case"VIEWPORT-UNBOTTOM":case"CONTAINER-BOTTOM":e.outer={height:i.sidebarHeight,position:"relative"}}return e.outer=c.extend({height:"",position:""},e.outer),e.inner=c.extend({position:"relative",top:"",left:"",bottom:"",width:"",transform:""},e.inner),e}}},{key:"stickyPosition",value:function(t){if(!this._breakpoint){t=this._reStyle||t||!1,this.options.topSpacing,this.options.bottomSpacing;var e=this.getAffixType(),i=this._getStyle(e);if((this.affixedType!=e||t)&&e){var n="affix."+e.toLowerCase().replace("viewport-","")+l;for(var o in c.eventTrigger(this.sidebar,n),"STATIC"===e?c.removeClass(this.sidebar,this.options.stickyClass):c.addClass(this.sidebar,this.options.stickyClass),i.outer){var s="number"==typeof i.outer[o]?"px":"";this.sidebar.style[o]=i.outer[o]+s}for(var r in i.inner){var a="number"==typeof i.inner[r]?"px":"";this.sidebarInner.style[r]=i.inner[r]+a}var p="affixed."+e.toLowerCase().replace("viewport-","")+l;c.eventTrigger(this.sidebar,p)}else this._initialized&&(this.sidebarInner.style.left=i.inner.left);this.affixedType=e}}},{key:"_widthBreakpoint",value:function(){window.innerWidth<=this.options.minWidth?(this._breakpoint=!0,this.affixedType="STATIC",this.sidebar.removeAttribute("style"),c.removeClass(this.sidebar,this.options.stickyClass),this.sidebarInner.removeAttribute("style")):this._breakpoint=!1}},{key:"updateSticky",value:function(){var t,e=this,i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this._running||(this._running=!0,t=i.type,requestAnimationFrame(function(){switch(t){case"scroll":e._calcDimensionsWithScroll(),e.observeScrollDir(),e.stickyPosition();break;case"resize":default:e._widthBreakpoint(),e.calcDimensions(),e.stickyPosition(!0)}e._running=!1}))}},{key:"_setSupportFeatures",value:function(){var t=this.support;t.transform=c.supportTransform(),t.transform3d=c.supportTransform(!0)}},{key:"_getTranslate",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return this.support.transform3d?"translate3d("+t+", "+e+", "+i+")":!!this.support.translate&&"translate("+t+", "+e+")"}},{key:"destroy",value:function(){window.removeEventListener("resize",this,{capture:!1}),window.removeEventListener("scroll",this,{capture:!1}),this.sidebar.classList.remove(this.options.stickyClass),this.sidebar.style.minHeight="",this.sidebar.removeEventListener("update"+l,this);var t={inner:{},outer:{}};for(var e in t.inner={position:"",top:"",left:"",bottom:"",width:"",transform:""},t.outer={height:"",position:""},t.outer)this.sidebar.style[e]=t.outer[e];for(var i in t.inner)this.sidebarInner.style[i]=t.inner[i];this.options.resizeSensor&&"undefined"!=typeof ResizeSensor&&(ResizeSensor.detach(this.sidebarInner,this.handleEvent),ResizeSensor.detach(this.container,this.handleEvent))}}],[{key:"supportTransform",value:function(t){var i=!1,e=t?"perspective":"transform",n=e.charAt(0).toUpperCase()+e.slice(1),o=document.createElement("support").style;return(e+" "+["Webkit","Moz","O","ms"].join(n+" ")+n).split(" ").forEach(function(t,e){if(void 0!==o[t])return i=t,!1}),i}},{key:"eventTrigger",value:function(t,e,i){try{var n=new CustomEvent(e,{detail:i})}catch(t){(n=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!0,i)}t.dispatchEvent(n)}},{key:"extend",value:function(t,e){var i={};for(var n in t)void 0!==e[n]?i[n]=e[n]:i[n]=t[n];return i}},{key:"offsetRelative",value:function(t){var e={left:0,top:0};do{var i=t.offsetTop,n=t.offsetLeft;isNaN(i)||(e.top+=i),isNaN(n)||(e.left+=n),t="BODY"===t.tagName?t.parentElement:t.offsetParent}while(t);return e}},{key:"addClass",value:function(t,e){c.hasClass(t,e)||(t.classList?t.classList.add(e):t.className+=" "+e)}},{key:"removeClass",value:function(t,e){c.hasClass(t,e)&&(t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," "))}},{key:"hasClass",value:function(t,e){return t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)}},{key:"defaults",get:function(){return n}}]),c}());t.default=i,window.StickySidebar=i})(e)});return t(i),t(e(function(t,e){(function(t){var e,s=(e=t)&&e.__esModule?e:{default:e};!function(){if("undefined"!=typeof window){var n=window.$||window.jQuery||window.Zepto,o="stickySidebar";if(n){n.fn.stickySidebar=function(i){return this.each(function(){var t=n(this),e=n(this).data(o);if(e||(e=new s.default(this,"object"==typeof i&&i),t.data(o,e)),"string"==typeof i){if(void 0===e[i]&&-1===["destroy","updateSticky"].indexOf(i))throw new Error('No method named "'+i+'"');e[i]()}})},n.fn.stickySidebar.Constructor=s.default;var t=n.fn.stickySidebar;n.fn.stickySidebar.noConflict=function(){return n.fn.stickySidebar=t,this}}}}()})(i)}))});
function isIterable(obj) {
    // checks for null and undefined
    if (obj == null) {
        return false;
    }
    return typeof obj[Symbol.iterator] === 'function';
}

function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

function toast(success = true, body, title = '', timeout = 0, link = '') {

    const redirect = function () {
        if (link === 'refresh') {
            link = window.location.href;
        }
        window.location.replace(link);
    };

    if (timeout === 0) {
        timeout = 8;
    }

    if (timeout === -1) {
        timeout = 0;
    }

    const options = {
        onclick: link ? redirect : null,
        newestOnTop: true,
        preventDuplicates: false,
        progressBar: true,
        timeOut: timeout * 1000,
        extendedTimeOut: timeout * 1000
    };

    if (success) {
        toastr.success(body, title, options);
    } else {
        toastr.error(body, title, options);
    }
}

function highLightOwnedGames() {
    if (user.isLoggedIn) {
        let games = localStorage.getItem('games');
        if (games != null) {
            games = JSON.parse(games);
            if (games != null) {
                $('[data-app-id]').each(function () {
                    const id = $(this).attr('data-app-id');
                    if (games.indexOf(parseInt(id)) !== -1) {
                        $(this).addClass('font-weight-bold')
                    }
                });
            }
        }
    }
}

// Local
const $dataTables = $('table.table-datatable');

$dataTables.each(function (i) {

    let order = [[0, 'asc']];
    let pageLength = 100;
    let paging = true;
    let ordering = true;

    // Limit
    const limit = $(this).attr('data-limit');
    if (limit > 0) {
        pageLength = Number(limit);
    }

    // Ordering
    const noSort = $(this).attr('data-no-sort');
    if (noSort) {
        ordering = false;
    }

    // Paging
    if ($(this).find('tbody tr').length <= pageLength) {
        paging = false;
    }

    // Sort
    const tableSort = $(this).attr('data-sort');
    if (tableSort) {

        order = eval(tableSort);

    } else {

        const $column = $(this).find('thead tr th[data-sort]');
        if ($column.length > 0) {

            const index = $column.index();
            const sort = $column.attr('data-sort');

            order = [[index, sort]];
        }
    }

    // Find
    const disabled = [];
    $(this).find('thead tr th[data-disabled]').each(function (i) {
        disabled.push($(this).index());
    });

    // Init
    $(this).DataTable({
        "pageLength": pageLength,
        "order": order,
        "paging": paging,
        "ordering": ordering,
        "fixedHeader": true,
        "info": false,
        "searching": true,
        "search": {
            "smart": true
        },
        "autoWidth": false,
        "lengthChange": false,
        "stateSave": false,
        "dom": '<"dt-pagination"p>t<"dt-pagination"p>',
        "columnDefs": [
            {
                "targets": disabled,
                "orderable": false
            }
        ],
        "drawCallback": function (settings, json) {

            const api = this.api();
            if (api.page.info().pages <= 1) {
                $(this).parent().find('.dt-pagination').hide();
            }
        },
        "initComplete": function (settings, json) {

            $('table.table-datatable').on('order.dt', function (e, settings, processing) {

                $('#live-badge').trigger('click');

            });
        }
    });

});

// Local search
const $searchField = $('input#search');
$searchField.on('keyup', function (e) {
    $dataTables.DataTable().search($(this).val()).draw();
});

$searchField.on('keyup', function (e) {
    if ($(this).val() && e.key === "Escape") {
        $(this).val('');
        $dataTables.DataTable().search($(this).val()).draw();
    }
});

// Local events
$dataTables.on('page.dt', function (e, settings, processing) {

    const top = $(this).prev().offset().top - 15;
    $('html, body').animate({scrollTop: top}, 200);

});

// Server side
const dtDefaultOptions = {
    "ajax": function (data, callback, settings) {

        delete data.columns;
        delete data.length;
        delete data.search.regex;

        $.ajax({
            url: $(this).attr('data-path'),
            data: data,
            success: callback,
            dataType: 'json',
            cache: $(this).attr('data-cache') !== "false"
        });
    },
    "processing": false,
    "serverSide": true,
    "pageLength": 100,
    "fixedHeader": true,
    "paging": true,
    "ordering": true,
    "info": false,
    "searching": true,
    "autoWidth": false,
    "lengthChange": false,
    "stateSave": false,
    "orderMulti": false,
    "dom": '<"dt-pagination"p>t<"dt-pagination"p>',
    "language": {
        "processing": '<i class="fas fa-spinner fa-spin fa-3x fa-fw"></i>'
    },
    "drawCallback": function (settings, json) {

        const api = this.api();
        if (api.page.info().pages <= 1) {
            $(this).parent().find('.dt-pagination').hide();
        }

        $(".paginate_button > a").on("focus", function () {
            $(this).blur(); // Fixes scrolling to pagination on every click
        });
    },
    "initComplete": function (settings, json) {

        $('table.table-datatable2').on('order.dt', function (e, settings, processing) {

            $('#live-badge').trigger('click');

        });
    }
};

// Server side events
$('table.table-datatable2').on('page.dt search.dt', function (e, settings, processing) {

    $(this).fadeTo(500, 0.3);

    if (e.type === 'page') {

        const top = $(this).prev().offset().top - 15;
        $('html, body').animate({scrollTop: top}, 200);
    }

}).on('draw.dt', function (e, settings, processing) {

    $(this).fadeTo(100, 1);
    highLightOwnedGames();

});

// Lock icon
const $lockIcon = '<i class="fa fa-lock text-muted" data-toggle="tooltip" data-placement="left" title="Private"></i>';

//
function addDataTablesRow(options, data, limit, $table) {

    let $row = $('<tr class="fade-green" />');
    options.createdRow($row[0], data, null);

    if (isIterable(options.columnDefs)) {
        for (const v of options.columnDefs) {

            let value = data[v];

            if ('render' in v) {
                value = v.render(null, null, data);
            }

            const $td = $('<td />').html(value);

            if ('createdCell' in v) {
                v.createdCell($td[0], null, data, null, null); // todo, this [0] may not be needed
            }

            $td.find('[data-livestamp]').html('a few seconds ago');

            $row.append($td);
        }
    }


    $table.prepend($row);

    $table.find('tbody tr').slice(limit).remove();
}

const $priceChart = $('#app-page #prices-chart, #package-page #prices-chart');

if ($priceChart.length > 0 && prices) {

    let chart, request;

    function upateChart(code) {

        // Cancel any current requests
        if (request) {
            request.abort();
        }

        // Update row styles
        $('tr[data-code]').removeClass('font-weight-bold').attr('data-link', '');
        $('tr[data-code=' + code + ']').addClass('font-weight-bold').removeAttr('data-link');

        // Show loading screen
        chart.showLoading();

        request = $.ajax({
            type: "GET",
            data: {
                code: code
            },
            url: $priceChart.attr('data-ajax'),
            dataType: 'json',
            cache: true,
            success: function (data, textStatus, jqXHR) {

                if ('prices' in data) {
                    chart.series[0].setData(data.prices);
                    chart.yAxis[0].update({title: {text: 'Price (' + data.symbol + ')'}});
                    chart.hideLoading();
                }
            },
        });
    }

    $('#prices tr[data-code]').on('click', function (e) {

        if ($(this).hasClass('font-weight-bold')) {
            return
        }

        upateChart($(this).attr('data-code'));

    });

    function loadPriceChart() {

        chart = Highcharts.chart('prices-chart', {
            chart: {
                zoomType: 'x'
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                title: {
                    text: 'Date'
                },
                type: 'datetime',
                labels: {
                    step: 1,
                    formatter: function () {
                        return moment(this.value).format("Do MMM YY");
                    },
                },
            },
            yAxis: {
                title: {
                    text: 'Price ($)'
                },
                type: 'linear',
                min: 0,
                allowDecimals: true
            },
            legend: {
                enabled: false
            },
            credits: {
                enabled: false
            },
            series: [
                {
                    type: 'line',
                    name: 'Price',
                    step: 'left',
                    color: '#28a745'
                }
            ],
            annotations: [{
                labelOptions: {
                    backgroundColor: 'rgba(255,255,255,0.5)',
                    verticalAlign: 'top',
                    y: 15
                },
                labels: [{
                    point: {
                        xAxis: 0,
                        yAxis: 0,
                        x: 27.98,
                        y: 255
                    },
                    text: 'Arbois'
                }, {
                    point: {
                        xAxis: 0,
                        yAxis: 0,
                        x: 45.5,
                        y: 611
                    },
                    text: 'Montrond'
                }, {
                    point: {
                        xAxis: 0,
                        yAxis: 0,
                        x: 63,
                        y: 651
                    },
                    text: 'Mont-sur-Monnet'
                }]
            }]
        });

        upateChart(user.userCountry);
    }
}

if ($('#admin-page').length > 0) {

    //
    //$('#player-id').val(user.userID);

    //
    const $actions = $('#actions a');

    $actions.on('click', function () {
        return confirm('Are you sure?');
    });

    const queuesForm = $('form#queues');
    queuesForm.on("submit", function (e) {
        e.preventDefault();
        $.ajax({
            type: 'post',
            url: queuesForm.attr('action'),
            data: $(this).serialize(),
            success: function (data, textStatus, jqXHR) {
                toast(true, 'Queued');
            },
        });
    });

    websocketListener('admin', function (e) {

        const data = $.parseJSON(e.data);
        toast(true, data.Data.message, '', 0);
    });
}

const $appPage = $('#app-page');

if ($appPage.length > 0) {

    const $modal = $('#news-modal');

    // Background
    const background = $('.container[data-bg]').attr('data-bg');
    if (background !== '') {
        $('body').css("background-image", 'url(' + background + ')');
    }

    // Fix links
    $('#news a').each(function () {

        const href = $(this).attr('href');
        if (href && !(href.startsWith('http'))) {
            $(this).attr('href', 'http://' + href);
        }
    });

    // Add hash when clicking row
    $('#news table.table').on('click', 'td', function (e) {
        history.pushState(undefined, undefined, '#news,' + $(this).closest('tr').attr('data-id'));
        showArt();
    });

    // Remove hash when closing modal
    $modal.on('hidden.bs.modal', function (e) {
        history.pushState("", document.title, "#news");
        showArt();
    });

    // News modal
    $(window).on('hashchange', showArt);
    $(document).on('draw.dt', showArt);

    // Detials image click
    const $detailsImage = $('#details img');

    $detailsImage.on('click', function () {
        $('.card-header-tabs a[href="#media"]').tab('show');
    });
    $detailsImage.on("error", function () {
        $(this).attr('src', '/assets/img/no-app-image-banner.jpg');
        $(this).hide();
    });

    function showArt() {

        const split = window.location.hash.split(',');

        // If the hash has a news ID
        if (split.length === 2 && (split[0] === 'news' || split[0] === '#news') && split[1]) {

            let $art = $('tr[data-id=' + split[1] + ']').find('.d-none').html();
            $art = $("<div />").html($art).text(); // Decode HTML
            $modal.find('.modal-body').html($art);
            $modal.modal('show');

        } else {
            $modal.modal('hide');
        }
    }

    // Media carousel
    const $carousel1 = $('#carousel1');
    const $carousel2 = $('#carousel2');

    $carousel1.slick({
        waitForAnimate: false,
        arrows: false,
        autoplay: false,
        dots: false,
        asNavFor: $carousel2,
        adaptiveHeight: true,
        lazyLoad: 'ondemand',
    });

    $carousel2.slick({
        waitForAnimate: false,
        arrows: false,
        slidesToShow: 15,
        autoplay: false,
        dots: false,
        variableWidth: true,
        asNavFor: $carousel1,
        focusOnSelect: true,
        centerMode: true,
        infinite: true,
    });

    $carousel1.on('afterChange', function (event, slick, currentSlide) {

        // Stop all videos
        resetVideos();

        // Auto play current video
        const $video = $carousel1.find('div[data-slick-index=' + currentSlide + '] video');
        if ($video.length > 0) {
            $video[0].play();
        }
    });

    // On tab change
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {

        const to = $(e.target);
        const from = $(e.relatedTarget);

        // On entering tab
        if (to.attr('href') === '#media') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);
                $carousel1.slick('setPosition');
                $carousel2.slick('setPosition');
            }
        }
        if (to.attr('href') === '#news') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);
                loadNews();
            }
        }
        if (to.attr('href') === '#prices') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);
                loadPriceChart();
            }
        }
        if (to.attr('href') === '#players') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);
                loadAppPlayersChart();
            }
        }
        if (to.attr('href') === '#reviews') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);
                loadAppReviewsChart();
            }
        }

        // On leaving tab
        if (from.attr('href') === '#media') {
            resetVideos();
        }
    });

    $(document).on('keydown', function (e) {
        if ($('a.active[href="#media"]').length > 0) {
            if (e.keyCode === 37) {
                $carousel1.slick('slickPrev');
            }
            if (e.keyCode === 39) {
                $carousel1.slick('slickNext');
            }
        }
    });

    function resetVideos() {
        $('video').each(function (index) {
            $(this)[0].pause();
            $(this)[0].currentTime = 0;
        });
    }

    // Websockets
    websocketListener('app', function (e) {

        const data = $.parseJSON(e.data);
        if (data.Data.toString() === $appPage.attr('data-id')) {
            toast(true, 'Click to refresh', 'This app has been updated', -1, 'refresh');
        }
    });

    // News data table
    function loadNews() {

        $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
            "order": [[2, 'desc']],
            "createdRow": function (row, data, dataIndex) {
                $(row).attr('data-id', data[0]);
            },
            "columnDefs": [
                // Title
                {
                    "targets": 0,
                    "render": function (data, type, row) {
                        return '<div><i class="fas fa-newspaper"></i> ' + row[1] + '</div><div class="d-none">' + row[5] + '</div>';
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).addClass('article-title');
                    },
                    "orderable": false
                },
                // Author
                {
                    "targets": 1,
                    "render": function (data, type, row) {
                        return row[2];
                    },
                    "orderable": false
                },
                // Date
                {
                    "targets": 2,
                    "render": function (data, type, row) {
                        return '<span data-toggle="tooltip" data-placement="left" title="' + row[4] + '" data-livestamp="' + row[3] + '"></span>';
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).attr('nowrap', 'nowrap');
                    },
                    "orderable": false
                }
            ]
        }));
    }

    const defaultAppChartOptions = {
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        credits: {
            enabled: false
        },
        plotOptions: {},
        xAxis: {
            title: {text: ''},
            type: 'datetime'
        },
    };

    function loadAppReviewsChart() {

        $.ajax({
            type: "GET",
            url: '/apps/' + $appPage.attr('data-id') + '/reviews.json',
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {

                if (data === null) {
                    data = [];
                }

                Highcharts.chart('reviews-chart', $.extend(true, {}, defaultAppChartOptions, {
                    chart: {
                        type: 'line'
                    },
                    yAxis: [
                        {
                            allowDecimals: false,
                            title: {text: ''},
                            min: 0,
                            max: 100,
                            endOnTick: false,
                            labels: {
                                formatter: function () {
                                    return this.value + '%';
                                }
                            }
                        },
                        {
                            allowDecimals: false,
                            title: {text: ''},
                            opposite: true,
                            min: 0,
                        }
                    ],
                    legend: {
                        enabled: true
                    },
                    tooltip: {
                        formatter: function () {

                            const time = moment(this.key).format("DD MMM YYYY @ HH:mm");

                            if (this.series.name === 'score') {
                                return this.y.toLocaleString() + '% score on ' + time;
                            } else if (this.series.name === 'positive') {
                                return this.y.toLocaleString() + ' positive reviews on ' + time;
                            } else if (this.series.name === 'negative') {
                                return this.y.toLocaleString() + ' negative reviews on ' + time;
                            }
                        },
                    },
                    series: [
                        {
                            name: 'score',
                            color: '#28a745',
                            data: data['mean_reviews_score'],
                            yAxis: 0,
                            marker: {symbol: 'circle'}
                        },
                        {
                            name: 'positive',
                            color: '#e83e8c',
                            data: data['mean_reviews_positive'],
                            yAxis: 1,
                            marker: {symbol: 'circle'}
                        },
                        {
                            name: 'negative',
                            color: '#007bff',
                            data: data['mean_reviews_negative'],
                            yAxis: 1,
                            marker: {symbol: 'circle'}
                        },
                    ],
                }));

            },
        });
    }

    function loadAppPlayersChart() {

        const defaultAppChartOptions = {
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            credits: {
                enabled: false
            },
            plotOptions: {},
            xAxis: {
                title: {text: ''},
                type: 'datetime'
            },
        };

        $.ajax({
            type: "GET",
            url: '/apps/' + $appPage.attr('data-id') + '/players.json',
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {

                if (data === null) {
                    data = [];
                }

                Highcharts.chart('players-chart', $.extend(true, {}, defaultAppChartOptions, {
                    chart: {
                        type: 'area'
                    },
                    yAxis: [
                        {
                            allowDecimals: false,
                            title: {text: ''},
                            min: 0,
                            labels: {
                                formatter: function () {
                                    return this.value.toLocaleString();
                                },
                            },
                        },
                        {
                            allowDecimals: false,
                            title: {text: ''},
                            min: 0,
                            opposite: true,
                            labels: {
                                formatter: function () {
                                    return this.value.toLocaleString();
                                },
                            },
                        }
                    ],
                    legend: {
                        enabled: false
                    },
                    tooltip: {
                        formatter: function () {
                            if (this.series.name === 'Players') {
                                return this.y.toLocaleString() + ' players on ' + moment(this.key).format("DD MMM YYYY @ HH:mm");
                            } else {
                                return this.y.toLocaleString() + ' Twitch viewers on ' + moment(this.key).format("DD MMM YYYY @ HH:mm");
                            }
                        },
                    },
                    series: [
                        {
                            name: 'Players',
                            color: '#28a745',
                            data: data['max_player_count'],
                            yAxis: 0,
                        },
                        {
                            name: 'Viewers',
                            color: '#6441A4', // Twitch purple
                            data: data['max_twitch_viewers'],
                            yAxis: 1,
                            type: 'line',
                        }
                    ],
                }));

            },
        });
    }
}

if ($('#apps-page').length > 0) {

    $('#user-currency-symbol').append(' ' + user.userCurrencySymbol);

    const $chosens = $('select.form-control-chosen');
    const $table = $('table.table-datatable2');
    const $form = $('form');

    // Set form fields from URL
    if (window.location.search) {
        $form.deserialize(window.location.search.substr(1));
    }

    // Setup drop downs
    $chosens.chosen({
        disable_search_threshold: 10,
        allow_single_deselect: true,
        rtl: false,
        max_selected_options: 10
    });

    // Setup Sliders
    const priceLow = $('#price-low').val();
    const priceHigh = $('#price-high').val();
    const priceElement = $('#price-slider')[0];
    const priceMax = $(priceElement).attr('data-max');
    const priceSlider = noUiSlider.create(priceElement, {
        start: [
            parseInt(priceLow ? priceLow : 0),
            parseInt(priceHigh ? priceHigh : priceMax)
        ],
        connect: true,
        step: 1,
        range: {
            'min': 0,
            'max': parseInt(priceMax ? priceMax : 101) // Default if can't read the real max
        }
    });

    const scoreLow = $('#score-low').val();
    const scoreHigh = $('#score-high').val();
    const scoreElement = $('#score-slider')[0];
    const scoreSlider = noUiSlider.create(scoreElement, {
        start: [
            parseInt(scoreLow ? scoreLow : 0),
            parseInt(scoreHigh ? scoreHigh : 100)
        ],
        connect: true,
        step: 1,
        range: {
            'min': 0,
            'max': 100
        }
    });

    // Form changes
    $chosens.on('change', redrawTable);
    $form.on('submit', redrawTable);
    priceSlider.on('set', onPriceChange);
    priceSlider.on('update', updateLabels);
    scoreSlider.on('set', onScoreChange);
    scoreSlider.on('update', updateLabels);

    function onPriceChange(e) {
        const prices = priceSlider.get();
        $('#price-low').val(prices[0]);
        $('#price-high').val(prices[1]);
        redrawTable();
    }

    function onScoreChange(e) {
        const scores = scoreSlider.get();
        $('#score-low').val(scores[0]);
        $('#score-high').val(scores[1]);
        redrawTable();
    }

    function redrawTable(e) {

        // Filter out empty form fields
        let formData = $form.serializeArray();
        formData = $.grep(formData, function (v) {
            return v.value !== "";
        });

        $table.DataTable().draw();
        history.pushState({}, document.title, "/apps?" + $.param(formData));
        updateLabels(e);
        return false;
    }

    $(document).ready(updateLabels);

    function updateLabels(e) {

        const prices = priceSlider.get();
        const scores = scoreSlider.get();

        if (prices[0] === prices[1]) {
            $('label#price-label').html('Price (' + user.userCurrencySymbol + Math.round(prices[0]) + ')');
        } else {
            $('label#price-label').html('Price (' + user.userCurrencySymbol + Math.round(prices[0]) + ' - ' + user.userCurrencySymbol + Math.round(prices[1]) + ')');
        }

        if (scores[0] === scores[1]) {
            $('label#score-label').html('Score (' + Math.round(scores[0]) + '%)');
        } else {
            $('label#score-label').html('Score (' + Math.round(scores[0]) + '% - ' + Math.round(scores[1]) + '%)');
        }
    }

    // Setup datatable
    $table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            // data.columns = $('#columns').val();

            data.search.tags = $('#tags').val();
            data.search.genres = $('#genres').val();
            data.search.developers = $('#developers').val();
            data.search.publishers = $('#publishers').val();
            data.search.platforms = $('#platforms').val();
            data.search.types = $('#types').val();
            data.search.search = $('#search').val();
            data.search.prices = priceSlider.get();
            data.search.scores = scoreSlider.get();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[2, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                },
                "orderable": false,
            },
            // Type
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "orderable": false
            },
            // Players
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[7].toLocaleString();
                },
                "orderSequence": ["desc"],
            },
            // Score
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[5] + '%';
                },
                "orderSequence": ["desc"],
            },
            // Price
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return row[6];
                },
                "orderSequence": ["desc"],
            },
        ]
    }));
}

if ($('#bundles-page').length > 0) {

    // Setup datatable
    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[4, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[2]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="/assets/img/no-app-image-square.jpg" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                }
            },
            // Discount
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4] + '%'
                }
            },
            // Apps
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[5].toLocaleString();
                }
            },
            // Packages
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[6].toLocaleString();
                }
            },
            // Updated At
            {
                "targets": 4,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "render": function (data, type, row) {
                    return '<span data-livestamp="' + row[3] + '"></span>';
                }
            }
        ]
    }));
}

if ($('#changes-page').length > 0) {

    const options = $.extend(true, {}, dtDefaultOptions, {
        "order": [[0, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[5]);
        },
        "columnDefs": [
            // Change ID
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return 'Change ' + row[0];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Date
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[2] + '" data-livestamp="' + row[1] + '"></span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Apps
            {
                "targets": 2,
                "render": function (data, type, row) {

                    let apps = [];
                    if (row[3] !== null) {
                        for (let k in row[3]) {
                            if (row[3].hasOwnProperty(k)) {

                                if (row[3][k] === '') {
                                    row[3][k] = 'Unknown App';
                                }

                                apps.push('<a href="/apps/' + k + '">' + row[3][k] + '</a>');
                            }
                        }
                    }

                    return apps.join('<br/>');
                },
                "orderable": false
            },
            // Packages
            {
                "targets": 3,
                "render": function (data, type, row) {

                    let packages = [];
                    if (row[4] !== null) {
                        for (let k in row[4]) {
                            if (row[4].hasOwnProperty(k)) {

                                if (row[4][k] === '') {
                                    row[4][k] = 'Unknown Package';
                                }

                                packages.push('<a href="/packages/' + k + '">' + row[4][k] + '</a>');
                            }
                        }
                    }

                    return packages.join('<br/>');
                },
                "orderable": false
            }
        ]
    });

    function sortByProductName(a, b) {
        if (a.name < b.name)
            return -1;
        if (a.name > b.name)
            return 1;
        return 0;
    }

    const $table = $('table.table-datatable2');
    const dt = $table.DataTable(options);

    websocketListener('changes', function (e) {

        const info = dt.page.info();
        if (info.page === 0) { // Page 1

            const data = $.parseJSON(e.data);

            // Loop changes in websocket data and add each one
            if (isIterable(data.Data)) {
                for (const v of data.Data) {
                    addDataTablesRow(options, v, info.length, $table);
                }
            }
        }
    });
}

if ($('#chat-page').length > 0) {

    const channel = $('[data-channel-id]').attr('data-channel-id');

    $.ajax({
        url: '/chat/' + channel + '/chat.json',
        dataType: 'json',
        cache: false,
        success: function (data, textStatus, jqXHR) {
            $('.fa-spin').remove();
            if (isIterable(data)) {
                for (const v of data) {
                    chatRow(v, false);
                }
            }
        },
    });

    // if (user.loggedIntoDiscord) {
    //     $('#reply').removeClass('d-none');
    // }

    $('#reply form').on('submit', function (e) {

        e.preventDefault();

        const button = $(this).find('button');

        button.html('<i class="fas fa-spinner fa-spin"></i>').prop('disabled', true);

        $.ajax({
            type: 'POST',
            url: '/chat/' + channel + '/post',
            dataType: 'json',
            cache: false,
            data: {
                message: $(this).find('textarea').val()
            },
            success: function (data, textStatus, jqXHR) {

                button.html('Submit').prop('disabled', false);
            },
            complete: function (jqXHR, textStatus) {
                toast(false, "Failed to post");
                button.html('Submit').prop('disabled', false);
            }
        });
    });

    websocketListener('chat', function (e) {

        const data = $.parseJSON(e.data);
        chatRow(data.Data);
    });

    function chatRow(data, addToTop = true) {

        const $container = $('ul[data-channel-id=' + data.channel + ']');

        $container.json2html(
            data,
            {
                '<>': 'li', 'class': 'media', 'html': [
                    {'<>': 'img', 'class': 'mr-3 rounded', 'src': 'https://cdn.discordapp.com/avatars/${author_id}/${author_avatar}.png?size=64', 'alt': '${author_user}'},
                    {
                        '<>': 'div', 'class': 'media-body', 'html': [
                            {
                                '<>': 'h5', 'class': function () {
                                    return 'mt-0 mb-1 rounded' + (addToTop ? ' fade-green' : '');
                                }, 'html': '${content}'
                            },
                            {'<>': 'p', 'class': 'text-muted', 'html': 'By ${author_user}'}
                        ]
                    }
                ]
            },
            {
                prepend: addToTop,
            }
        );

        $container.find('li').slice(50).remove();
    }
}

if ($('#commits-page').length > 0) {

    const $table = $('table#commits');

    let page = null;

    $table.on('draw.dt', function () {
        page = null;
    });

    $table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[1, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-link', data[3]);
            $(row).attr('data-target', '_blank');
            if (data[4]) {
                $(row).addClass('table-success', data[0]);
            }
        },
        "columnDefs": [
            // Message
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return row[0];
                },
                "createdCell": function (td, cellData, rowData, row, col) {

                    $(td).attr('id', rowData[5]);
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Time
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[1] + '" data-livestamp="' + row[1] + '">' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Hash
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Deployed
            {
                "targets": 3,
                "render": function (data, type, row) {

                    if (page === null) {
                        page = $table.DataTable().page.info().page;
                    }

                    if (row[2] || page > 0) {
                        return '<i class="fas fa-check"></i>';
                    } else {
                        return '<i class="fas fa-times"></i>';
                    }
                },
                "orderable": false
            }
        ]
    }));
}

if ($('#contact-page').length > 0) {

    const $name = $('#name');
    const $email = $('#email');
    const $message = $('#message');

    $name.val(user.contactPage['name']);
    $email.val(user.contactPage['email']);
    $message.val(user.contactPage['message']);

    if (!$email.val()) {
        $email.val(user.userEmail);
    }
}

if ($('#coop-page').length > 0) {

    if (user.isLoggedIn) {
        $('#addme').removeClass('d-none')
    }

    $('form#add').submit(function (e) {

        e.preventDefault();

        let url = '';

        const val = $('input#id').val();

        if (document.location.href.indexOf("?") >= 0) {
            url = document.location.href + "&p=" + val;
        } else {
            url = document.location.href + "?p=" + val;
        }

        document.location = url;
    });

    $('#addme input').click(function (e) {

        $('input#id').val(user.userID);
        $('form#add').submit();
    });
}

const $xpPage = $('#experience-page');

if ($xpPage.length > 0) {

    const $from = $('#from');
    const $to = $('#to');

    if (user.isLoggedIn) {
        $('.lead span').html('You are level <a href="/experience/' + user.userLevel + '" data-level="' + user.userLevel + '">' + user.userLevel + '</a>.');

        $from.val(user.userLevel);
        $to.val(user.userLevel + 10)
    } else {
        $from.val(10);
        $to.val(20)
    }

    // Scroll to number
    function scroll() {

        if (typeof scrollTo === 'string') {

            const top = $(scrollTo).offset().top - 100;
            $('html, body').animate({scrollTop: top}, 500);

            $('tr').removeClass('table-success');
            $(scrollTo).addClass('table-success');
        }
    }

    $xpPage.on("click", "tr[data-level]", function (e) {

        const level = $(this).attr('data-level');

        if (history.pushState) {
            history.pushState('data', '', '/experience/' + level);
        }

        scrollTo = 'tr[data-level=' + level + ']';
        scroll();
    });

    // Calculator
    function levelToXP(level) {

        let total = 0;

        for (let current = 0; current <= level; current++) {
            total += Math.ceil(current / 10) * 100;
        }

        return total;
    }

    function update() {

        const answer = $('#answer');
        answer.val('Loading..');

        let from = $('#from').val();
        if (from < 1) {
            from = 1;
        }

        let to = $('#to').val();
        if (to < 1) {
            to = 1;
        }

        answer.val((levelToXP(to) - levelToXP(from)).toLocaleString());
    }

    $('#from, #to').change(update);

    $('#calculate').click(function (e) {
        e.preventDefault();
        update();
    });

    $(document).ready(scroll);
    $(document).ready(update);
}

const $document = $(document);
const $body = $("body");

// Data links
let dataLinkDrag = false;
let dataLinkX = 0;
let dataLinkY = 0;

// On document for elements that are created with JS
$document.on('mousedown', '[data-link]', function (e) {
    dataLinkX = e.screenX;
    dataLinkY = e.screenY;
    dataLinkDrag = false;
});

$document.on('mousemove', '[data-link]', function handler(e) {
    if (!dataLinkDrag && (Math.abs(dataLinkX - e.screenX) > 5 || Math.abs(dataLinkY - e.screenY) > 5)) {
        dataLinkDrag = true;
    }
});

$(document).on('mouseup', '[data-link]', function (e) {

    const link = $(this).attr('data-link');
    const target = $(this).attr('data-target');

    if (!link) {
        return true;
    }

    if (dataLinkDrag) {
        return true;
    }

    // Right click
    if (e.which === 3) {
        return true;
    }

    // Middle click
    if (e.ctrlKey || e.shiftKey || e.metaKey || e.which === 2 || target === '_blank') {

        if (!$(e.target).is("a")) {
            window.open(link, '_blank');
        }
        return true;
    }

    window.location.href = link;
    return true;
});

$('.stop-prop').on('click', function (e) {
    e.stopPropagation();
});

// Auto dropdowns
$('.navbar .dropdown').hover(
    function () {
        $(this).addClass("show").find('.dropdown-menu').addClass("show");
    }, function () {
        $(this).removeClass("show").find('.dropdown-menu').removeClass("show");
    }
).click(function (e) {
    e.stopPropagation();
});

// Tooptips
$body.tooltip({
    selector: '[data-toggle="tooltip"]'
});

// JSON fields
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

$('.json').each(function (i, value) {

    const json = $(this).text();

    if (isJson(json)) {
        const jsonObj = JSON.parse(json);
        $(this).text(JSON.stringify(jsonObj, null, '\t'));
    }
});

// Tabs
(function ($, window) {
    'use strict';

    $(document).ready(function () {

        // Choose tab from URL
        const hash = window.location.hash;
        if (hash) {

            let fullHash = '';
            hash.split(/[,\-]/).map(function (hash) {

                fullHash = (fullHash === '') ? hash : fullHash + '-' + hash;

                $('.nav-link[href="' + fullHash + '"]').tab('show');
            });
        }

        // Set URL from tab
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            const hash = $(e.target).attr('href');
            if (history.pushState) {
                history.pushState(null, null, hash);
            } else {
                location.hash = hash;
            }
        });
    });

})(jQuery, window);


// Scroll to top link
const $top = $("#top");

$(window).on('scroll', function (e) {

    if ($(window).scrollTop() >= 1000) {
        $top.addClass("show");
    } else {
        $top.removeClass("show");
    }
});

$top.click(function (e) {
    $('html, body').animate({scrollTop: 0}, 500);
});

highLightOwnedGames();

// Websocket helper
function websocketListener(page, onMessage) {

    if (window.WebSocket === undefined) {

        toast(false, 'Your browser does not support websockets');

    } else {

        const socket = new WebSocket((location.protocol === 'https:' ? "wss://gamedb.online" : "ws://" + location.host) + "/websocket/" + page);
        const $badge = $('#live-badge');
        let open = false;

        socket.onopen = function (e) {
            $badge.addClass('badge-success').removeClass('badge-secondary badge-danger');
            console.log('Websocket opened');
            open = true;
        };

        socket.onclose = function (e) {
            if (open) {
                $badge.addClass('badge-danger').removeClass('badge-secondary badge-success');
                toast(false, 'Live functionality has stopped'); // onerror will trigger too
                console.log('Websocket closed');
            }
        };

        socket.onerror = function (e) {
            if (open) {
                $badge.addClass('badge-danger').removeClass('badge-secondary badge-success');
                toast(false, 'Live functionality has stopped');
            }
        };

        socket.onmessage = onMessage;

        $badge.on('click', function (e) {
            if ($(this).hasClass('cursor-pointer')) {
                socket.close(1000);
                $badge.addClass('badge-danger').removeClass('badge-secondary badge-success cursor-pointer');
                toast(false, 'Live functionality has stopped');
            }
        });
    }
}

// Ads
if (user.showAds) {

    window.CHITIKA = {
        'units': [
            {"calltype": "async[2]", "publisher": "jleagle", "width": 160, "height": 600, "sid": "gamedb-right"},
            {"calltype": "async[2]", "publisher": "jleagle", "width": 160, "height": 600, "sid": "gamedb-left"},
            {"calltype": "async[2]", "publisher": "jleagle", "width": 728, "height": 90, "sid": "gamedb-top-big"},
            {"calltype": "async[2]", "publisher": "jleagle", "width": 320, "height": 50, "sid": "gamedb-top-small"}
        ]
    };

    $('div.container').eq(1)
        .prepend('<div class="ad-right d-none d-xl-block" id="chitikaAdBlock-0"></div>')
        .prepend('<div class="ad-left d-none d-xl-block" id="chitikaAdBlock-1"></div>');
    $('#ad-top')
        .prepend('<div class="ad-top-big d-none d-lg-block d-xl-none" id="chitikaAdBlock-2"></div>')
        .prepend('<div class="ad-top-small d-block d-lg-none" id="chitikaAdBlock-3"></div>');
}

// Toasts
if (isIterable(user.toasts)) {
    for (const v of user.toasts) {
        toast(v.success, v.message, v.title, v.timeout, v.link);
    }
}

// Flag
const flag = $('<img src="/assets/img/flags/' + user.userCountry.toLowerCase() + '.png" alt="' + user.userCountry + '">');
if (user.isLoggedIn) {
    $('#header-flag').html(flag);
} else {
    $('#header-flag').html('<a href="/login">' + flag.prop('outerHTML') + '</a>');
}

// Admin link
if (user.isAdmin) {
    $('#header-admin').html('<a class="nav-link" href="/admin">Admin</a>');
}

// User link
const $headerUser = $('#header-user');
const $headerSettings = $('#header-settings');

if (user.isLoggedIn) {
    $headerUser.html('<a class="nav-link" href="/players/' + user.userID + '">' + user.userName + '</a>');

    $headerSettings.prepend('<div class="dropdown-divider"></div>');
    $headerSettings.prepend('<a class="dropdown-item" href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>');
    $headerSettings.prepend('<a class="dropdown-item" href="/settings"><i class="fas fa-cog"></i> Settings</a>');
} else {
    $headerUser.html('<a class="nav-link" href="/login">Login</a>');
}

// Flashes
if (isIterable(user.flashesGood)) {
    let $flashesGood = $('#flashes-good');
    for (const v of user.flashesGood) {
        $flashesGood.append('<p>' + v + '</p>');
        $flashesGood.removeClass('d-none');
    }
}

if (isIterable(user.flashesBad)) {
    let $flashesBad = $('#flashes-bad');
    for (const v of user.flashesBad) {
        $flashesBad.append('<p>' + v + '</p>');
        $flashesBad.removeClass('d-none');
    }
}

// Fix URLs
$(document).ready(function () {
    const path = $('#app-page, #package-page, #player-page, #bundle-page').attr('data-path');
    if (path !== '' && path !== window.location.pathname) {
        history.replaceState(null, null, path);
    }
});

// Broken images
$(document).ready(function () {

    $('img').one('error', function () {

        const url = $(this).attr('data-src');
        if (url) {
            this.src = url;
        }
    });

    $('img[src=""][data-src]').each(function (i, value) {
        this.src = $(this).attr('data-src');
    });
});

if ($('#home-page').length > 0) {



}

if ($('#login-page').length > 0) {

    $('#email').val(user.loginPage['email']);

}

if ($('#new-releases-page').length > 0) {

    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "pageLength": 50,
        "order": [[3, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                },
            },
            // Price
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderSequence": ["desc", "asc"],
            },
            // Score
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[7] + '%';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderSequence": ["desc", "asc"],
            },
            // Players
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[8].toLocaleString();
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderSequence": ["desc", "asc"],
            },
            // Release Date
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return row[6];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderSequence": ["desc", "asc"],
            },
            // Chart
            {
                "targets": 5,
                "render": function (data, type, row) {
                    return '<div data-app-id="' + row[0] + '"><i class="fas fa-spinner fa-spin"></i></div>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('chart');
                },
                "orderSequence": ["desc", "asc"],
            },
        ]
    }));
}

if ($('#news-page').length > 0) {

    const $modal = $('#news-modal');

    // Add hash when clicking row
    $('table.table').on('click', '.article-title', function (e) {
        history.pushState(undefined, undefined, '#apps,' + $(this).closest('tr').attr('data-id'));
        showArt();
    });

    // Remove hash when closing modal
    $modal.on('hidden.bs.modal', function (e) {
        history.pushState("", document.title, window.location.pathname + window.location.search + '#apps');
        showArt();
    });

    // News modal
    $(window).on('hashchange', showArt);
    $(document).on('draw.dt', showArt);

    function showArt() {

        const hash = window.location.hash.replace('#apps', '');
        if (hash) {

            let $art = $('tr[data-id="' + hash + '"]').find('.d-none').html();
            $art = $("<div />").html($art).text(); // Decode HTML
            $modal.find('.modal-body').html($art);
            $modal.modal('show');

        } else {
            $modal.modal('hide');
        }
    }

    // On tab change
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {

        const to = $(e.target);
        const from = $(e.relatedTarget);

        // On entering tab
        if (to.attr('href') === '#apps') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);

                loadNewsAjax();
            }
        }
    });

    // Show more article
    $('.minned').on('click', function (e) {
        $(this).toggleClass('minned');
    });

    function loadNewsAjax() {

        $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
            "order": [[2, 'desc']],
            "createdRow": function (row, data, dataIndex) {
                $(row).attr('data-id', data[0]);
            },
            "columnDefs": [
                // Game
                {
                    "targets": 0,
                    "render": function (data, type, row) {

                        // Icon URL
                        if (row[8] === '') {
                            row[8] = '/assets/img/no-app-image-square.jpg';
                        } else if (!row[8].startsWith("/") && !row[8].startsWith("http")) {
                            row[8] = 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/' + row[6] + '/' + row[8] + '.jpg';
                        }

                        return '<img src="' + row[8] + '" class="rounded square" alt="' + row[7] + '"><span data-app-id="' + row[6] + '">' + row[7] + '</span>';
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).addClass('img');
                        $(td).attr('data-link', rowData[9]);
                    },
                    "orderable": false
                },
                // Title
                {
                    "targets": 1,
                    "render": function (data, type, row) {
                        return '<span>' + row[1] + '</span><div class="d-none">' + row[5] + '</div>';
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).addClass('article-title');
                        $(td).attr('data-link', '');
                    },
                    "orderable": false
                },
                // Date
                {
                    "targets": 2,
                    "render": function (data, type, row) {
                        return '<span data-toggle="tooltip" data-placement="left" title="' + row[4] + '" data-livestamp="' + row[3] + '"></span>';
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).attr('nowrap', 'nowrap');
                    },
                    "orderable": false
                }
            ]
        }));
    }

}

const $packagePage = $('#package-page');

if ($packagePage.length > 0) {

    // On tab change
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {

        const to = $(e.target);
        const from = $(e.relatedTarget);

        // On entering tab
        if (to.attr('href') === '#prices') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);
                loadPriceChart();
            }
        }
    });

    // Websockets
    websocketListener('package', function (e) {

        const data = $.parseJSON(e.data);
        if (data.Data.toString() === $packagePage.attr('data-id')) {
            toast(true, 'Click to refresh', 'This package has been updated', -1, 'refresh');
        }
    });
}

if ($('#packages-page').length > 0) {

    const options = $.extend(true, {}, dtDefaultOptions, {
        "order": [[4, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[1]);
        },
        "columnDefs": [
            // Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[8] + '" class="rounded square" alt="' + row[2] + '"><span>' + row[2] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('nowrap', 'nowrap');
                },
            },
            // Coming Soon
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[3];
                },
                "orderable": false
            },
            // Apps
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[4].toLocaleString();
                }
            },
            // Price
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                }
            },
            // Updated Time
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[7] + '" data-livestamp="' + row[6] + '">' + row[7] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                }
            }
        ]
    });

    const $table = $('table.table-datatable2');
    const dt = $table.DataTable(options);

    websocketListener('packages', function (e) {

        const info = dt.page.info();
        if (info.page === 0) { // Page 1

            const data = $.parseJSON(e.data);
            addDataTablesRow(options, data.Data, info.length, $table);
        }
    });
}

const $playerPage = $('#player-page');

if ($playerPage.length > 0) {

    // Add user ID to coop link
    if (user.isLoggedIn) {
        const $coop = $('#coop-link');
        $coop.attr('href', $coop.attr('href') + '&p=' + user.userID);
    }

    // Update link
    $('a[data-update-id]').on('click', function (e) {

        e.preventDefault();

        const $link = $(this);

        $('i', $link).addClass('fa-spin');

        $.ajax({
            url: '/players/' + $(this).attr('data-update-id') + '/update.json',
            dataType: 'json',
            cache: false,
            success: function (data, textStatus, jqXHR) {

                toast(data.success, data.toast);

                $('i', $link).removeClass('fa-spin');

                if (data.log) {
                    console.log(data.log);
                }
            },
        });
    });

    // On tab change
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {

        const to = $(e.target);
        const from = $(e.relatedTarget);

        // On entering tab
        if (to.attr('href') === '#charts') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);

                loadPlayerCharts();
            }
        }
        if (to.attr('href') === '#games') {
            if (!to.attr('loaded')) {
                to.attr('loaded', 1);

                loadPlayerGames();
            }
        }
    });

    // Websockets
    websocketListener('profile', function (e) {

        const data = $.parseJSON(e.data);
        if (data.Data.toString() === $playerPage.attr('data-id')) {
            toast(true, 'Click to refresh', 'This player has been updated', -1, 'refresh');
        }

    });

    function loadPlayerGames() {

        $('#games table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
            "order": [[2, 'desc']],
            "createdRow": function (row, data, dataIndex) {
                $(row).attr('data-id', data[0]);
                $(row).attr('data-link', data[7]);
            },
            "columnDefs": [
                // Icon / Name
                {
                    "targets": 0,
                    "render": function (data, type, row) {
                        return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).addClass('img').attr('data-app-id', rowData[0]);
                    }
                },
                // Price
                {
                    "targets": 1,
                    "render": function (data, type, row) {
                        return row[5];
                    },
                },
                // Time
                {
                    "targets": 2,
                    "render": function (data, type, row) {
                        return row[4];
                    },
                    "createdCell": function (td, cellData, rowData, row, col) {
                        $(td).attr('nowrap', 'nowrap');
                    }
                },
                // Price/Time
                {
                    "targets": 3,
                    "render": function (data, type, row) {
                        return row[6];
                    },
                }
            ]
        }));
    }

    function loadPlayerCharts() {

        const defaultPlayerChartOptions = {
            chart: {
                type: 'line',
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            credits: {
                enabled: false
            },
            legend: {
                enabled: true
            },
            plotOptions: {},
            xAxis: {
                title: {
                    text: ''
                },
                type: 'datetime'
            },
        };

        $.ajax({
            type: "GET",
            url: '/players/' + $playerPage.attr('data-id') + '/history.json',
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {

                if (data === null) {
                    data = [];
                }

                const yAxisHistory = {
                    allowDecimals: false,
                    title: {
                        text: ''
                    },
                    labels: {
                        enabled: false
                    },
                };

                Highcharts.chart('history-chart', $.extend(true, {}, defaultPlayerChartOptions, {

                    yAxis: [
                        yAxisHistory,
                        yAxisHistory,
                        yAxisHistory,
                        yAxisHistory,
                        yAxisHistory,
                    ],
                    tooltip: {
                        formatter: function () {
                            return this.y.toLocaleString() + ' ' + this.series.name.toLowerCase() + ' on ' + moment(this.key).format("dddd DD MMM YYYY");
                        },
                    },
                    series: [
                        {
                            name: 'Level',
                            color: '#28a745',
                            data: data['mean_level'],
                            marker: {symbol: 'circle'},
                            yAxis: 0,
                        },
                        {
                            name: 'Games',
                            color: '#007bff',
                            data: data['mean_games'],
                            marker: {symbol: 'circle'},
                            yAxis: 1,
                        },
                        {
                            name: 'Badges',
                            color: '#e83e8c',
                            data: data['mean_badges'],
                            marker: {symbol: 'circle'},
                            yAxis: 2,
                        },
                        {
                            name: 'Playtime',
                            color: '#ffc107',
                            data: data['mean_playtime'],
                            marker: {symbol: 'circle'},
                            yAxis: 3,
                        },
                        {
                            name: 'Friends',
                            color: '#343a40',
                            data: data['mean_friends'],
                            marker: {symbol: 'circle'},
                            yAxis: 4,
                        },
                    ],
                }));

                const yAxisRanks = {
                    allowDecimals: false,
                    title: {
                        text: ''
                    },
                    reversed: true,
                    min: 1,
                    labels: {
                        enabled: false
                    },
                };

                Highcharts.chart('ranks-chart', $.extend(true, {}, defaultPlayerChartOptions, {
                    yAxis: [
                        yAxisRanks,
                        yAxisRanks,
                        yAxisRanks,
                        yAxisRanks,
                        yAxisRanks,
                    ],
                    tooltip: {
                        formatter: function () {
                            return this.series.name + ' rank ' + this.y.toLocaleString() + ' on ' + moment(this.key).format("dddd DD MMM YYYY");
                        },
                    },
                    series: [
                        {
                            name: 'Level',
                            color: '#28a745',
                            data: data['mean_level_rank'],
                            marker: {symbol: 'circle'},
                            yAxis: 0,
                        },
                        {
                            name: 'Games',
                            color: '#007bff',
                            data: data['mean_games_rank'],
                            marker: {symbol: 'circle'},
                            yAxis: 1,
                        },
                        {
                            name: 'Badges',
                            color: '#e83e8c',
                            data: data['mean_badges_rank'],
                            marker: {symbol: 'circle'},
                            yAxis: 2,
                        },
                        {
                            name: 'Playtime',
                            color: '#ffc107',
                            data: data['mean_playtime_rank'],
                            marker: {symbol: 'circle'},
                            yAxis: 3,
                        },
                        {
                            name: 'Friends',
                            color: '#343a40',
                            data: data['mean_friends_rank'],
                            marker: {symbol: 'circle'},
                            yAxis: 4,
                        }
                    ],
                }));

            },
        });

    }
}

if ($('#ranks-page').length > 0) {

    $('form').on('submit', function (e) {

        $table.DataTable().draw();
        return false;
    });

    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            data.search.search = $('#search').val();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[3, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[1]);
            $(row).attr('data-link', '/players/' + data[1]);
        },
        "columnDefs": [
            // Rank
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return row[0];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('font-weight-bold')
                },
                "orderable": false
            },
            // Player
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<img src="' + row[3] + '" class="rounded square" alt="' + row[2] + '"><span>' + row[2] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img')
                },
                "orderable": false
            },
            // Flag
            {
                "targets": 2,
                "render": function (data, type, row) {
                    if (row[11]) {
                        return '<img data-toggle="tooltip" data-placement="left" title="' + row[12] + '" src="' + row[11] + '" class="rounded" alt="' + row[12] + '">';
                    }
                    return '';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                },
                "orderable": false
            },
            // Avatar 2 / Level
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return '<div class="' + row[4] + ' square"></div><span>' + row[5].toLocaleString() + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img')
                },
                "orderSequence": ["desc"],
            },
            // Games
            {
                "targets": 4,
                "render": function (data, type, row) {

                    if (row[6]) {
                        return row[6].toLocaleString();
                    }
                    return $lockIcon;
                },
                "orderSequence": ["desc"],
            },
            // Badges
            {
                "targets": 5,
                "render": function (data, type, row) {
                    return row[7].toLocaleString();
                },
                "orderSequence": ["desc"],
            },
            // Time
            {
                "targets": 6,
                "render": function (data, type, row) {

                    if (row[8] === '0m') {
                        return $lockIcon;
                    }

                    return row[8];
                },
                "createdCell": function (td, cellData, rowData, row, col) {

                    $(td).attr('nowrap', 'nowrap');

                    if (rowData[8] !== '0m') {
                        $(td).attr('data-toggle', 'tooltip').attr('data-placement', 'left').attr('title', rowData[9]);
                    }
                },
                "orderSequence": ["desc"],
            },
            // Friends
            {
                "targets": 7,
                "render": function (data, type, row) {
                    return row[10].toLocaleString();
                },
                "orderSequence": ["desc"],
            }
        ]
    }));
}
if ($('#price-changes-page').length > 0) {

    const $chosens = $('select.form-control-chosen');
    const $table = $('table.table-datatable2');
    const $form = $('form');

    // Set form fields from URL
    if (window.location.search) {
        $form.deserialize(window.location.search.substr(1));
    }

    // Setup drop downs
    $chosens.chosen({
        disable_search_threshold: 10,
        allow_single_deselect: true,
        rtl: false,
        max_selected_options: 10
    });

    // Setup Sliders
    const changeLow = $('#change-low').val();
    const changeHigh = $('#change-high').val();
    const changeElement = $('#change-slider')[0];
    const changeMax = $(changeElement).attr('data-max');
    const changeSlider = noUiSlider.create(changeElement, {
        start: [
            parseInt(changeLow ? changeLow : -100),
            parseInt(changeHigh ? changeHigh : 100)
        ],
        connect: true,
        step: 1,
        range: {
            'min': -100,
            'max': 100
        }
    });

    const priceLow = $('#price-low').val();
    const priceHigh = $('#price-high').val();
    const priceElement = $('#price-slider')[0];
    const priceMax = $(priceElement).attr('data-max');
    const priceSlider = noUiSlider.create(priceElement, {
        start: [
            parseInt(priceLow ? priceLow : -100),
            parseInt(priceHigh ? priceHigh : 100)
        ],
        connect: true,
        step: 1,
        range: {
            'min': 0,
            'max': 100
        }
    });

    $chosens.on('change', redrawTable);
    $form.on('submit', redrawTable);
    changeSlider.on('set', onPercentChange);
    changeSlider.on('update', updateLabels);
    priceSlider.on('set', onPriceChange);
    priceSlider.on('update', updateLabels);

    function onPercentChange(e) {

        const percents = changeSlider.get();
        $('#change-low').val(percents[0]);
        $('#change-high').val(percents[1]);
        redrawTable();
    }

    function onPriceChange(e) {

        const prices = priceSlider.get();
        $('#price-low').val(prices[0]);
        $('#price-high').val(prices[1]);
        redrawTable();
    }

    function redrawTable(e) {

        // Filter out empty form fields
        let formData = $form.serializeArray();
        formData = $.grep(formData, function (v) {
            return v.value !== "";
        });

        $table.DataTable().draw();
        history.pushState({}, document.title, '/price-changes?' + $.param(formData));
        updateLabels(e);
        return false;
    }

    $(document).ready(updateLabels);

    function updateLabels(e) {

        const percents = changeSlider.get();
        const prices = priceSlider.get();

        if (percents[0] === percents[1]) {
            $('label#change-label').html('Price Change Percent (' + Math.round(percents[0]) + '%)');
        } else {
            $('label#change-label').html('Price Change Percent (' + Math.round(percents[0]) + '% - ' + Math.round(percents[1]) + '%)');
        }

        if (prices[0] === prices[1]) {
            $('label#price-label').html('Final Price (' + user.userCurrencySymbol + Math.round(prices[0]) + ')');
        } else {
            $('label#price-label').html('Final Price (' + user.userCurrencySymbol + Math.round(prices[0]) + ' - ' + user.userCurrencySymbol + Math.round(prices[1]) + ')');
        }
    }

    // Init table
    const options = $.extend(true, {}, dtDefaultOptions, {
        "order": [[4, 'desc']],
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            data.search.type = $('#type').val();
            data.search.percents = changeSlider.get();
            data.search.prices = priceSlider.get();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[5]);

            let x = Math.min(data[9], 100); // Get a range of -100 to 100
            x += 100; // Get a range of 0 to 200
            x = x / 2; // Get a range of 0 to 100
            $(row).addClass('col-grad-' + Math.round(x));
        },
        "columnDefs": [
            // App/Package Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[4] + '" class="rounded square" alt="' + row[3] + '"><span>' + row[3] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img')
                },
                "orderable": false
            },
            // Before
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[6];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // After
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[7];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Change
            {
                "targets": 3,
                "render": function (data, type, row) {

                    const small = '<small>' + row[9] + '%</small>';

                    if (row[9] === 0) {
                        return row[8];
                    }

                    return row[8] + ' ' + small;
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Time
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[10] + '" data-livestamp="' + row[11] + '">' + row[10] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    });

    // Update table live
    const dt = $table.DataTable(options);

    websocketListener('prices', function (e) {

        const info = dt.page.info();
        if (info.page === 0) { // Page 1

            const data = $.parseJSON(e.data);
            addDataTablesRow(options, data.Data, info.length, $table);
        }
    });
}

if ($('#product-keys-page').length > 0) {

    const $table = $('table.table-datatable2');

    // Setup datatable
    $table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "ajax": function (data, callback, settings) {

            delete data.columns;
            delete data.length;
            delete data.search.regex;

            data.search.key = $('#key').val();
            data.search.value = $('#value').val();
            data.search.type = $("input[name=type]:checked").val();

            $.ajax({
                url: $(this).attr('data-path'),
                data: data,
                success: callback,
                dataType: 'json',
                cache: true
            });
        },
        "order": [[0, 'asc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                }
            },
            // Value
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "orderable": false
            },
        ]
    }));
}

if ($('#queues-page').length > 0) {

    let activeWindow = true;

    $(window).on('focus', function () {
        activeWindow = true;
    });

    $(window).on('blur', function () {
        activeWindow = false;
    });

    const charts = {};
    $('[data-queue]').each(function (index, value) {
        charts[$(this).attr('data-queue')] = loadChart($(this).find('div').attr('id'));
    });

    updateCharts();

    const timer = window.setInterval(updateCharts, 10000); // 10 Seconds

    function updateCharts() {

        if (!activeWindow) {
            return;
        }

        $.ajax({
            url: '/queues/queues.json',
            dataType: 'json',
            cache: false,
            success: function (data, textStatus, jqXHR) {

                $.each(charts, function (index, value) {
                    value.series[0].setData(data[index]['sum_messages']);
                });

            },
            error: function (xhr, ajaxOptions, thrownError) {
                clearTimeout(timer);
                $('#live-badge').addClass('badge-danger').removeClass('badge-secondary badge-success');
                toast(false, 'Live functionality has stopped');
            }
        });
    }

    function loadChart(id) {

        return Highcharts.chart(id, {
            chart: {
                animation: false
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            credits: {
                enabled: false
            },
            legend: {
                enabled: false
            },
            xAxis: {
                title: {
                    text: ''
                },
                labels: {
                    step: 1,
                    formatter: function () {
                        return moment(this.value).format("h:mm");
                    },
                },
                type: 'datetime',
            },
            yAxis: [
                {
                    title: {
                        text: ''
                    },
                    allowDecimals: false,
                    min: 0,
                }
            ],
            plotOptions: {
                series: {
                    marker: {
                        enabled: false // Too close together
                    },
                    animation: false
                }
            },
            series: [
                {
                    color: '#28a745',
                    yAxis: 0,
                    name: 'size',
                    type: 'areaspline',
                },
            ],
            tooltip: {
                formatter: function () {
                    return this.y.toLocaleString() + ' items in the queue at ' + moment(this.key).format("h:mm") + ' UTC';
                },
            }
        });
    }
}

function recaptchaCallback(code) {

    $('form[data-recaptcha] button[type=submit]').prop("disabled", false);


    const inputs = $('form[data-recaptcha] input[type=text], form input[type=email], form textarea').filter(function () {
        return $(this).val() === '';
    });

    if (inputs.length > 0) {
        inputs.get(0).focus();
    } else {
        $('form[data-recaptcha]').submit();
    }
}

if ($('#settings-page').length > 0) {

    // Password
    $('input:password').pwstrength({
        ui: {
            showPopover: true,
            showErrors: true,
        },
        common: {
            usernameField: '#email'
        }
    });

    // Browser alert permissions
    // const $checkbox = $('#browser-alerts');
    //
    // $checkbox.on('click', function () {
    //     if ($(this).is(':checked')) {
    //
    //         Push.Permission.request(
    //             function () {
    //             },
    //             function () {
    //                 alert('You have denied notification access in your browser.');
    //                 $(this).prop("checked", false);
    //             }
    //         );
    //     }
    // });

    // Data tables
    $('#events table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[0, 'desc']],
        "columnDefs": [
            // Time
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[1] + '" data-livestamp="' + row[0] + '">' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Type
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<i class="fas ' + row[7] + '"></i> ' + row[2];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // IP
            {
                "targets": 2,
                "render": function (data, type, row) {

                    if (row[3] === row[6]) {
                        return '<span class="font-weight-bold" data-toggle="tooltip" data-placement="left" title="Your current IP">' + row[3] + '</span>';
                    }
                    return row[3];
                },
                "orderable": false
            },
            // User Agent
            {
                "targets": 3,
                "render": function (data, type, row) {
                    // return row[4];
                    return '<span data-toggle="tooltip" data-placement="left" title="' + row[4] + '">' + row[5] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    //$(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            }
        ]
    }));
}

if ($('#stats-page').length > 0) {

    const defaultStatsChartOptions = {
        chart: {
            type: 'column'
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        credits: {
            enabled: false
        },
        legend: {
            enabled: false
        },
        xAxis: {
            title: {
                text: ''
            },
            type: 'category'
        },
        yAxis: {
            allowDecimals: false,
            title: {
                text: ''
            }
        },
        series: [{
            color: '#28a745',
        }],
        plotOptions: {
            series: {
                pointPadding: 0,
                groupPadding: 0,
            }
        }
    };

    $.ajax({
        type: "GET",
        url: '/stats/client-players',
        dataType: 'json',
        success: function (data, textStatus, jqXHR) {

            if (data === null) {
                data = [];
            }

            Highcharts.chart('client-players', $.extend(true, {}, defaultStatsChartOptions, {
                chart: {
                    type: 'area',
                },
                xAxis: {
                    type: 'datetime',
                    // tickInterval: 5,
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' people logged into steam on ' + moment(this.key).format("dddd DD MMM YYYY @ HH:mm");
                    },
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    window.location.href = '/apps?score-low=' + this.x + '&score-high=' + (this.x + 1);
                                }
                            }
                        }
                    }
                },
                series: [{
                    data: data['max_player_count']
                }]
            }));
        },
    });

    $.ajax({
        type: "GET",
        url: '/stats/app-scores',
        dataType: 'json',
        success: function (data, textStatus, jqXHR) {

            if (data === null) {
                data = [];
            }

            Highcharts.chart('scores', $.extend(true, {}, defaultStatsChartOptions, {
                xAxis: {
                    tickInterval: 5,
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' apps have ' + this.x + '/100';
                    },
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    window.location.href = '/apps?score-low=' + this.x + '&score-high=' + (this.x + 1);
                                }
                            }
                        }
                    }
                },
                series: [{
                    data: data
                }]
            }));
        },
    });

    $.ajax({
        type: "GET",
        url: '/stats/app-types',
        dataType: 'json',
        success: function (data, textStatus, jqXHR) {

            if (data === null) {
                data = [];
            }

            Highcharts.chart('types', $.extend(true, {}, defaultStatsChartOptions, {
                xAxis: {
                    labels: {
                        rotation: -20,
                    }
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' ' + this.key + ' apps';
                    },
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    window.location.href = '/apps?types=' + (this.name.toLowerCase());
                                }
                            }
                        }
                    }
                },
                series: [{
                    data: data,
                    dataLabels: {
                        enabled: true,
                        formatter: function () {
                            return this.y.toLocaleString();
                        }
                    }
                }]
            }));
        },
    });

    $.ajax({
        type: "GET",
        url: '/stats/release-dates',
        dataType: 'json',
        success: function (data, textStatus, jqXHR) {

            if (data === null) {
                data = [];
            }

            Highcharts.chart('release-dates', $.extend(true, {}, defaultStatsChartOptions, {
                chart: {
                    type: 'area',
                },
                xAxis: {
                    type: 'datetime'
                },
                tooltip: {
                    formatter: function () {
                        return this.y.toLocaleString() + ' apps released on ' + moment(this.key).format("dddd DD MMM YYYY");
                    },
                },
                series: [{
                    data: data
                }],
                plotOptions: {
                    area: {
                        lineWidth: 1,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                    }
                },
            }));
        },
    });
}

const $steamApiPage = $('#steam-api-page');

if ($steamApiPage.length > 0) {

    $('#sidebar').stickySidebar({
        topSpacing: 0,
        bottomSpacing: 16,
    });

    $('.endpoint').on('mouseenter', function () {
        $(this).select();
    });

    const $form = $steamApiPage.find('form#key-form');

    $form.on('submit', function (e) {

        e.preventDefault();
        localStorage.setItem('settings', $form.serialize());
        setMethodSettings();
        toast(true, 'Settings Saved');
    });

    function setMethodSettings() {

        const key = $('#key-form input[name=key]').val();
        const format = $('#key-form select[name=format]').val();

        // if (key) {
        //     $steamApiPage.find('table').show();
        // } else {
        //     $steamApiPage.find('table').hide();
        // }

        $('div.interface input[name=key]').val(key);
        $('div.interface input[name=format]').val(format);
    }

    $form.deserialize(localStorage.getItem('settings'));
    setMethodSettings();
}

const $trendingPage = $('#trending-page');
const $table = $('table.table-datatable2');

if ($trendingPage.length > 0) {

    $table.DataTable($.extend(true, {}, dtDefaultOptions, {
        "pageLength": 50,
        "order": [[3, 'desc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                },
                "orderable": false,
            },
            // Price
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false,
            },
            // Players
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[6].toLocaleString();
                },
                "orderSequence": ["desc"],
            },
            // Trend Value
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[5].toLocaleString();
                },
                "orderSequence": ["desc", "asc"],
            },
            // Chart
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return '<div data-app-id="' + row[0] + '"><i class="fas fa-spinner fa-spin"></i></div>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('chart');
                },
                "orderSequence": ["desc", "asc"],
            },
        ]
    }));
}

if ($trendingPage.length > 0 || $('#new-releases-page').length > 0) {

    $table.on('draw.dt', function (e, settings, processing) {
        loadCharts();
    });

    function loadCharts() {

        const vals = $('td.chart div[data-app-id]')
            .map(function () {
                return $(this).attr('data-app-id');
            })
            .get()
            .join(',');

        $.ajax({
            type: "GET",
            url: '/trending/charts.json?ids=' + vals,
            dataType: 'json',
            success: function (datas, textStatus, jqXHR) {

                if (datas === null) {
                    return
                }

                $('div[data-app-id]').each(function (index) {

                    let data = {};
                    const appID = $(this).attr('data-app-id');

                    if (datas !== null && appID in datas && 'max_player_count' in datas[appID]) {
                        data = datas[appID]['max_player_count'];
                    } else {
                        data = [];
                    }

                    Highcharts.chart(this, {
                        chart: {
                            type: 'area',
                            margin: [0, 0, 0, 0],
                            skipClone: true,
                            backgroundColor: null,
                            height: 32,
                        },
                        title: {
                            text: ''
                        },
                        subtitle: {
                            text: ''
                        },
                        credits: {
                            enabled: false
                        },
                        legend: {
                            enabled: false
                        },
                        xAxis: {
                            title: {text: null},
                            labels: {enabled: false},
                            type: 'datetime',
                        },
                        yAxis: {
                            title: {text: null},
                            labels: {enabled: false},
                            min: 0,
                        },
                        tooltip: {
                            hideDelay: 0,
                            outside: true,
                            shared: true,
                            formatter: function () {
                                return this.y.toLocaleString() + ' players on ' + moment(this.x).format("DD MMM YYYY @ HH:mm");
                            },
                            style: {
                                'width': '500px',
                            }
                        },
                        series: [
                            {
                                color: '#28a745',
                                data: data,
                            },
                        ],
                    });
                });
            },
        });
    }
}

//# sourceMappingURL=typescript.js.map
if ($('#upcoming-page').length > 0) {

    $('table.table-datatable2').DataTable($.extend(true, {}, dtDefaultOptions, {
        "order": [[3, 'asc']],
        "createdRow": function (row, data, dataIndex) {
            $(row).attr('data-id', data[0]);
            $(row).attr('data-link', data[3]);
        },
        "columnDefs": [
            // Icon / Name
            {
                "targets": 0,
                "render": function (data, type, row) {
                    return '<img src="' + row[2] + '" class="rounded square" alt="' + row[1] + '"><span>' + row[1] + '</span>';
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).addClass('img');
                    $(td).attr('data-app-id', rowData[0]);
                },
            },
            // App Type
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return row[4];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
                "orderable": false
            },
            // Price
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return row[5];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
            },
            // Release Date
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return row[6];
                },
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('nowrap', 'nowrap');
                },
            },
        ]
    }));
}
