// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type CommitsRequest struct {
	Message              int32    `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitsRequest) Reset()         { *m = CommitsRequest{} }
func (m *CommitsRequest) String() string { return proto.CompactTextString(m) }
func (*CommitsRequest) ProtoMessage()    {}
func (*CommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{1}
}

func (m *CommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitsRequest.Unmarshal(m, b)
}
func (m *CommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitsRequest.Marshal(b, m, deterministic)
}
func (m *CommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitsRequest.Merge(m, src)
}
func (m *CommitsRequest) XXX_Size() int {
	return xxx_messageInfo_CommitsRequest.Size(m)
}
func (m *CommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitsRequest proto.InternalMessageInfo

func (m *CommitsRequest) GetMessage() int32 {
	if m != nil {
		return m.Message
	}
	return 0
}

type CommitsResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Deployed             bool     `protobuf:"varint,2,opt,name=deployed,proto3" json:"deployed,omitempty"`
	Time                 int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Link                 string   `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	Highlight            bool     `protobuf:"varint,5,opt,name=highlight,proto3" json:"highlight,omitempty"`
	Hash                 string   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitsResponse) Reset()         { *m = CommitsResponse{} }
func (m *CommitsResponse) String() string { return proto.CompactTextString(m) }
func (*CommitsResponse) ProtoMessage()    {}
func (*CommitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{2}
}

func (m *CommitsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitsResponse.Unmarshal(m, b)
}
func (m *CommitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitsResponse.Marshal(b, m, deterministic)
}
func (m *CommitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitsResponse.Merge(m, src)
}
func (m *CommitsResponse) XXX_Size() int {
	return xxx_messageInfo_CommitsResponse.Size(m)
}
func (m *CommitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitsResponse proto.InternalMessageInfo

func (m *CommitsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommitsResponse) GetDeployed() bool {
	if m != nil {
		return m.Deployed
	}
	return false
}

func (m *CommitsResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CommitsResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CommitsResponse) GetHighlight() bool {
	if m != nil {
		return m.Highlight
	}
	return false
}

func (m *CommitsResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type SteamAPIResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteamAPIResponse) Reset()         { *m = SteamAPIResponse{} }
func (m *SteamAPIResponse) String() string { return proto.CompactTextString(m) }
func (*SteamAPIResponse) ProtoMessage()    {}
func (*SteamAPIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{3}
}

func (m *SteamAPIResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteamAPIResponse.Unmarshal(m, b)
}
func (m *SteamAPIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteamAPIResponse.Marshal(b, m, deterministic)
}
func (m *SteamAPIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteamAPIResponse.Merge(m, src)
}
func (m *SteamAPIResponse) XXX_Size() int {
	return xxx_messageInfo_SteamAPIResponse.Size(m)
}
func (m *SteamAPIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SteamAPIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SteamAPIResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "protos.Empty")
	proto.RegisterType((*CommitsRequest)(nil), "protos.CommitsRequest")
	proto.RegisterType((*CommitsResponse)(nil), "protos.CommitsResponse")
	proto.RegisterType((*SteamAPIResponse)(nil), "protos.SteamAPIResponse")
}

func init() { proto.RegisterFile("protos.proto", fileDescriptor_5da3cbeb884d181c) }

var fileDescriptor_5da3cbeb884d181c = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0xc4, 0xb4, 0x69, 0xd2, 0x27, 0xa0, 0xe8, 0x0d, 0x60, 0x45, 0x0c, 0x91, 0xa7, 0x88, 0xa1,
	0x42, 0x65, 0x60, 0x43, 0x42, 0x88, 0x01, 0xa6, 0x2a, 0xfd, 0x82, 0x40, 0x9f, 0x62, 0x8b, 0xb8,
	0x0e, 0xb5, 0x41, 0xea, 0xe7, 0xf0, 0xa7, 0x28, 0x4e, 0x6d, 0x44, 0x99, 0xfc, 0xee, 0x74, 0x77,
	0x7e, 0x3e, 0xc3, 0x49, 0xb7, 0x35, 0xce, 0xd8, 0xb9, 0x3f, 0x70, 0x32, 0x20, 0x91, 0x42, 0xf2,
	0xa4, 0x3b, 0xb7, 0x13, 0xd7, 0x70, 0xf6, 0x68, 0xb4, 0x56, 0xce, 0x56, 0xf4, 0xf1, 0x49, 0xd6,
	0x21, 0x87, 0x54, 0x93, 0xb5, 0x75, 0x43, 0x9c, 0x15, 0xac, 0x4c, 0xaa, 0x00, 0xc5, 0x37, 0x83,
	0x59, 0x14, 0xdb, 0xce, 0x6c, 0x2c, 0x1d, 0xaa, 0xa7, 0x51, 0x8d, 0x39, 0x64, 0x6b, 0xea, 0x5a,
	0xb3, 0xa3, 0x35, 0x3f, 0x2e, 0x58, 0x99, 0x55, 0x11, 0x23, 0xc2, 0xd8, 0x29, 0x4d, 0x7c, 0x54,
	0xb0, 0x72, 0x54, 0xf9, 0xb9, 0xe7, 0x5a, 0xb5, 0x79, 0xe7, 0x63, 0x1f, 0xe3, 0x67, 0xbc, 0x82,
	0xa9, 0x54, 0x8d, 0x6c, 0x55, 0x23, 0x1d, 0x4f, 0x7c, 0xc8, 0x2f, 0xd1, 0x3b, 0x64, 0x6d, 0x25,
	0x9f, 0x0c, 0x8e, 0x7e, 0x16, 0x08, 0xe7, 0x2b, 0x47, 0xb5, 0x7e, 0x58, 0x3e, 0x87, 0x1d, 0x17,
	0xcb, 0xf8, 0xc6, 0x15, 0x6d, 0xbf, 0xd4, 0x1b, 0xe1, 0x3d, 0xa4, 0x7b, 0x06, 0x2f, 0xe6, 0xfb,
	0x82, 0xfe, 0xd6, 0x90, 0x5f, 0xfe, 0xe3, 0x87, 0x34, 0x71, 0x74, 0xc3, 0x16, 0x2f, 0x30, 0x0b,
	0xb7, 0x84, 0xc8, 0x3b, 0xc8, 0x02, 0x85, 0xa7, 0xc1, 0xeb, 0x3b, 0xce, 0x79, 0x80, 0x87, 0x9b,
	0xf5, 0x59, 0xaf, 0xc3, 0x97, 0xdc, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x88, 0x53, 0xed, 0x8c,
	0xa9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommitsServiceClient is the client API for CommitsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitsServiceClient interface {
	Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (CommitsService_CommitsClient, error)
}

type commitsServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommitsServiceClient(cc *grpc.ClientConn) CommitsServiceClient {
	return &commitsServiceClient{cc}
}

func (c *commitsServiceClient) Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (CommitsService_CommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitsService_serviceDesc.Streams[0], "/protos.CommitsService/Commits", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitsServiceCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitsService_CommitsClient interface {
	Recv() (*CommitsResponse, error)
	grpc.ClientStream
}

type commitsServiceCommitsClient struct {
	grpc.ClientStream
}

func (x *commitsServiceCommitsClient) Recv() (*CommitsResponse, error) {
	m := new(CommitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommitsServiceServer is the server API for CommitsService service.
type CommitsServiceServer interface {
	Commits(*CommitsRequest, CommitsService_CommitsServer) error
}

func RegisterCommitsServiceServer(s *grpc.Server, srv CommitsServiceServer) {
	s.RegisterService(&_CommitsService_serviceDesc, srv)
}

func _CommitsService_Commits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitsServiceServer).Commits(m, &commitsServiceCommitsServer{stream})
}

type CommitsService_CommitsServer interface {
	Send(*CommitsResponse) error
	grpc.ServerStream
}

type commitsServiceCommitsServer struct {
	grpc.ServerStream
}

func (x *commitsServiceCommitsServer) Send(m *CommitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CommitsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CommitsService",
	HandlerType: (*CommitsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Commits",
			Handler:       _CommitsService_Commits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos.proto",
}

// SteamAPIServiceClient is the client API for SteamAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SteamAPIServiceClient interface {
	SteamAPI(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SteamAPIService_SteamAPIClient, error)
}

type steamAPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewSteamAPIServiceClient(cc *grpc.ClientConn) SteamAPIServiceClient {
	return &steamAPIServiceClient{cc}
}

func (c *steamAPIServiceClient) SteamAPI(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SteamAPIService_SteamAPIClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SteamAPIService_serviceDesc.Streams[0], "/protos.SteamAPIService/SteamAPI", opts...)
	if err != nil {
		return nil, err
	}
	x := &steamAPIServiceSteamAPIClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SteamAPIService_SteamAPIClient interface {
	Recv() (*SteamAPIResponse, error)
	grpc.ClientStream
}

type steamAPIServiceSteamAPIClient struct {
	grpc.ClientStream
}

func (x *steamAPIServiceSteamAPIClient) Recv() (*SteamAPIResponse, error) {
	m := new(SteamAPIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SteamAPIServiceServer is the server API for SteamAPIService service.
type SteamAPIServiceServer interface {
	SteamAPI(*Empty, SteamAPIService_SteamAPIServer) error
}

func RegisterSteamAPIServiceServer(s *grpc.Server, srv SteamAPIServiceServer) {
	s.RegisterService(&_SteamAPIService_serviceDesc, srv)
}

func _SteamAPIService_SteamAPI_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SteamAPIServiceServer).SteamAPI(m, &steamAPIServiceSteamAPIServer{stream})
}

type SteamAPIService_SteamAPIServer interface {
	Send(*SteamAPIResponse) error
	grpc.ServerStream
}

type steamAPIServiceSteamAPIServer struct {
	grpc.ServerStream
}

func (x *steamAPIServiceSteamAPIServer) Send(m *SteamAPIResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SteamAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SteamAPIService",
	HandlerType: (*SteamAPIServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SteamAPI",
			Handler:       _SteamAPIService_SteamAPI_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos.proto",
}
