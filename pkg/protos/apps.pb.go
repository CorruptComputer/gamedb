// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apps.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	apps.proto
	github.proto
	shared.proto

It has these top-level messages:
	SearchAppsRequest
	AppMongoResponse
	ListAppsRequest
	AppElasticResponse
	CommitsRequest
	CommitResponse
	Empty
	Price
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchAppsRequest struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *SearchAppsRequest) Reset()                    { *m = SearchAppsRequest{} }
func (m *SearchAppsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchAppsRequest) ProtoMessage()               {}
func (*SearchAppsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchAppsRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchAppsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type AppMongoResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AppMongoResponse) Reset()                    { *m = AppMongoResponse{} }
func (m *AppMongoResponse) String() string            { return proto.CompactTextString(m) }
func (*AppMongoResponse) ProtoMessage()               {}
func (*AppMongoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppMongoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListAppsRequest struct {
	Message int32 `protobuf:"varint,1,opt,name=message" json:"message,omitempty"`
}

func (m *ListAppsRequest) Reset()                    { *m = ListAppsRequest{} }
func (m *ListAppsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAppsRequest) ProtoMessage()               {}
func (*ListAppsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListAppsRequest) GetMessage() int32 {
	if m != nil {
		return m.Message
	}
	return 0
}

type AppElasticResponse struct {
	AchievementsCounts   int32             `protobuf:"varint,1,opt,name=achievements_counts,json=achievementsCounts" json:"achievements_counts,omitempty"`
	FloatachievementsAvg float32           `protobuf:"fixed32,2,opt,name=floatachievements_avg,json=floatachievementsAvg" json:"floatachievements_avg,omitempty"`
	AchievementsIcons    map[string]string `protobuf:"bytes,3,rep,name=achievementsIcons" json:"achievementsIcons,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Aliases              []string          `protobuf:"bytes,4,rep,name=aliases" json:"aliases,omitempty"`
	Categories           []int32           `protobuf:"varint,5,rep,packed,name=categories" json:"categories,omitempty"`
	Developers           []int32           `protobuf:"varint,6,rep,packed,name=developers" json:"developers,omitempty"`
	Followers            int32             `protobuf:"varint,7,opt,name=followers" json:"followers,omitempty"`
	Genres               []int32           `protobuf:"varint,8,rep,packed,name=genres" json:"genres,omitempty"`
	Icon                 string            `protobuf:"bytes,9,opt,name=icon" json:"icon,omitempty"`
	Id                   int32             `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,11,opt,name=name" json:"name,omitempty"`
	NameMarked           string            `protobuf:"bytes,12,opt,name=name_marked,json=nameMarked" json:"name_marked,omitempty"`
	Platforms            []string          `protobuf:"bytes,13,rep,name=platforms" json:"platforms,omitempty"`
	Players              int32             `protobuf:"varint,14,opt,name=players" json:"players,omitempty"`
	Prices               map[string]*Price `protobuf:"bytes,15,rep,name=prices" json:"prices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Publishers           []int32           `protobuf:"varint,16,rep,packed,name=publishers" json:"publishers,omitempty"`
	ReleaseDate          int64             `protobuf:"varint,17,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Score                float32           `protobuf:"fixed32,18,opt,name=score" json:"score,omitempty"`
	SearchScore          float32           `protobuf:"fixed32,19,opt,name=searchScore" json:"searchScore,omitempty"`
	Tags                 []int32           `protobuf:"varint,20,rep,packed,name=tags" json:"tags,omitempty"`
	Type                 string            `protobuf:"bytes,21,opt,name=type" json:"type,omitempty"`
	Trend                float32           `protobuf:"fixed32,22,opt,name=trend" json:"trend,omitempty"`
	WishlistAvg          float32           `protobuf:"fixed32,23,opt,name=wishlist_avg,json=wishlistAvg" json:"wishlist_avg,omitempty"`
	WishlistCount        int32             `protobuf:"varint,24,opt,name=wishlist_count,json=wishlistCount" json:"wishlist_count,omitempty"`
}

func (m *AppElasticResponse) Reset()                    { *m = AppElasticResponse{} }
func (m *AppElasticResponse) String() string            { return proto.CompactTextString(m) }
func (*AppElasticResponse) ProtoMessage()               {}
func (*AppElasticResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppElasticResponse) GetAchievementsCounts() int32 {
	if m != nil {
		return m.AchievementsCounts
	}
	return 0
}

func (m *AppElasticResponse) GetFloatachievementsAvg() float32 {
	if m != nil {
		return m.FloatachievementsAvg
	}
	return 0
}

func (m *AppElasticResponse) GetAchievementsIcons() map[string]string {
	if m != nil {
		return m.AchievementsIcons
	}
	return nil
}

func (m *AppElasticResponse) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *AppElasticResponse) GetCategories() []int32 {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *AppElasticResponse) GetDevelopers() []int32 {
	if m != nil {
		return m.Developers
	}
	return nil
}

func (m *AppElasticResponse) GetFollowers() int32 {
	if m != nil {
		return m.Followers
	}
	return 0
}

func (m *AppElasticResponse) GetGenres() []int32 {
	if m != nil {
		return m.Genres
	}
	return nil
}

func (m *AppElasticResponse) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AppElasticResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppElasticResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppElasticResponse) GetNameMarked() string {
	if m != nil {
		return m.NameMarked
	}
	return ""
}

func (m *AppElasticResponse) GetPlatforms() []string {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *AppElasticResponse) GetPlayers() int32 {
	if m != nil {
		return m.Players
	}
	return 0
}

func (m *AppElasticResponse) GetPrices() map[string]*Price {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *AppElasticResponse) GetPublishers() []int32 {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *AppElasticResponse) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *AppElasticResponse) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *AppElasticResponse) GetSearchScore() float32 {
	if m != nil {
		return m.SearchScore
	}
	return 0
}

func (m *AppElasticResponse) GetTags() []int32 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AppElasticResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AppElasticResponse) GetTrend() float32 {
	if m != nil {
		return m.Trend
	}
	return 0
}

func (m *AppElasticResponse) GetWishlistAvg() float32 {
	if m != nil {
		return m.WishlistAvg
	}
	return 0
}

func (m *AppElasticResponse) GetWishlistCount() int32 {
	if m != nil {
		return m.WishlistCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SearchAppsRequest)(nil), "protos.SearchAppsRequest")
	proto.RegisterType((*AppMongoResponse)(nil), "protos.AppMongoResponse")
	proto.RegisterType((*ListAppsRequest)(nil), "protos.ListAppsRequest")
	proto.RegisterType((*AppElasticResponse)(nil), "protos.AppElasticResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppsService service

type AppsServiceClient interface {
	Search(ctx context.Context, in *SearchAppsRequest, opts ...grpc.CallOption) (AppsService_SearchClient, error)
	Apps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (AppsService_AppsClient, error)
}

type appsServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppsServiceClient(cc *grpc.ClientConn) AppsServiceClient {
	return &appsServiceClient{cc}
}

func (c *appsServiceClient) Search(ctx context.Context, in *SearchAppsRequest, opts ...grpc.CallOption) (AppsService_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppsService_serviceDesc.Streams[0], c.cc, "/protos.AppsService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &appsServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppsService_SearchClient interface {
	Recv() (*AppMongoResponse, error)
	grpc.ClientStream
}

type appsServiceSearchClient struct {
	grpc.ClientStream
}

func (x *appsServiceSearchClient) Recv() (*AppMongoResponse, error) {
	m := new(AppMongoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appsServiceClient) Apps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (AppsService_AppsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppsService_serviceDesc.Streams[1], c.cc, "/protos.AppsService/Apps", opts...)
	if err != nil {
		return nil, err
	}
	x := &appsServiceAppsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppsService_AppsClient interface {
	Recv() (*AppElasticResponse, error)
	grpc.ClientStream
}

type appsServiceAppsClient struct {
	grpc.ClientStream
}

func (x *appsServiceAppsClient) Recv() (*AppElasticResponse, error) {
	m := new(AppElasticResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppsService service

type AppsServiceServer interface {
	Search(*SearchAppsRequest, AppsService_SearchServer) error
	Apps(*ListAppsRequest, AppsService_AppsServer) error
}

func RegisterAppsServiceServer(s *grpc.Server, srv AppsServiceServer) {
	s.RegisterService(&_AppsService_serviceDesc, srv)
}

func _AppsService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchAppsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppsServiceServer).Search(m, &appsServiceSearchServer{stream})
}

type AppsService_SearchServer interface {
	Send(*AppMongoResponse) error
	grpc.ServerStream
}

type appsServiceSearchServer struct {
	grpc.ServerStream
}

func (x *appsServiceSearchServer) Send(m *AppMongoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AppsService_Apps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAppsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppsServiceServer).Apps(m, &appsServiceAppsServer{stream})
}

type AppsService_AppsServer interface {
	Send(*AppElasticResponse) error
	grpc.ServerStream
}

type appsServiceAppsServer struct {
	grpc.ServerStream
}

func (x *appsServiceAppsServer) Send(m *AppElasticResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AppsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AppsService",
	HandlerType: (*AppsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _AppsService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Apps",
			Handler:       _AppsService_Apps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apps.proto",
}

func init() { proto.RegisterFile("apps.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x6d, 0x6f, 0x13, 0x31,
	0x0c, 0xa6, 0xed, 0xda, 0x51, 0xdf, 0x5e, 0xb3, 0xb7, 0x50, 0x21, 0x28, 0x45, 0x4c, 0x95, 0x90,
	0x06, 0x6c, 0x5f, 0x10, 0x1f, 0x40, 0x15, 0x9b, 0x04, 0x12, 0x93, 0xd0, 0xed, 0x07, 0x54, 0xd9,
	0xd5, 0x6d, 0xa3, 0x5d, 0x2f, 0xe1, 0x9c, 0x76, 0xea, 0xcf, 0xe0, 0x97, 0xf1, 0x97, 0x50, 0x9c,
	0xeb, 0x7a, 0x5b, 0x07, 0x9f, 0xce, 0x7e, 0x9c, 0xc7, 0xf1, 0x3d, 0x76, 0x0c, 0xa0, 0xac, 0xa5,
	0x13, 0x9b, 0x1b, 0x67, 0x44, 0x83, 0x3f, 0xd4, 0xda, 0xa0, 0xb1, 0xca, 0x71, 0x10, 0xd0, 0x4e,
	0x0f, 0x76, 0xaf, 0x50, 0xe5, 0xc9, 0xb8, 0x67, 0x2d, 0xc5, 0xf8, 0x6b, 0x8a, 0xe4, 0xc4, 0x21,
	0x34, 0xcc, 0x70, 0x48, 0xe8, 0x64, 0xa5, 0x5d, 0xe9, 0xd6, 0xe3, 0xc2, 0x13, 0xfb, 0x50, 0x4f,
	0xf5, 0x44, 0x3b, 0x59, 0x65, 0x38, 0x38, 0x9d, 0x63, 0xd8, 0xe9, 0x59, 0x7b, 0x69, 0xb2, 0x91,
	0x89, 0x91, 0xac, 0xc9, 0x08, 0x85, 0x80, 0xb5, 0x4c, 0x4d, 0x90, 0xf9, 0xcd, 0x98, 0xed, 0xce,
	0x5b, 0xd8, 0xfe, 0xa1, 0xc9, 0x95, 0x2f, 0x92, 0xb0, 0x3e, 0x41, 0x22, 0x35, 0xc2, 0xe2, 0xa6,
	0x85, 0xdb, 0xf9, 0xb3, 0x0e, 0xa2, 0x67, 0xed, 0x45, 0xaa, 0xc8, 0xe9, 0xe4, 0x2e, 0xef, 0x3b,
	0xd8, 0x53, 0xc9, 0x58, 0xe3, 0x0c, 0x27, 0x98, 0x39, 0xea, 0x27, 0x66, 0x9a, 0x39, 0x2a, 0xc8,
	0xa2, 0x1c, 0xfa, 0xca, 0x11, 0x71, 0x06, 0x07, 0xc3, 0xd4, 0x28, 0x77, 0x8f, 0xa5, 0x66, 0x23,
	0xfe, 0x85, 0x6a, 0xbc, 0xbf, 0x12, 0xec, 0xcd, 0x46, 0xa2, 0x0f, 0xbb, 0x65, 0xe8, 0x7b, 0x62,
	0x32, 0x92, 0xb5, 0x76, 0xad, 0x1b, 0x9d, 0x7e, 0x08, 0xba, 0xd1, 0xc9, 0x6a, 0x71, 0x27, 0xbd,
	0x87, 0x9c, 0x8b, 0xcc, 0xe5, 0xf3, 0x78, 0x35, 0x97, 0xff, 0x6f, 0x95, 0x6a, 0x45, 0x48, 0x72,
	0xad, 0x5d, 0xeb, 0x36, 0xe3, 0x85, 0x2b, 0x5e, 0x00, 0x24, 0xca, 0xe1, 0xc8, 0xe4, 0x1a, 0x49,
	0xd6, 0xdb, 0xb5, 0x6e, 0x3d, 0x2e, 0x21, 0x3e, 0x3e, 0xc0, 0x19, 0xa6, 0xc6, 0x62, 0x4e, 0xb2,
	0x11, 0xe2, 0x4b, 0x44, 0x3c, 0x87, 0xe6, 0xd0, 0xa4, 0xa9, 0xb9, 0xf5, 0xe1, 0x75, 0x96, 0x65,
	0x09, 0xf8, 0xc6, 0x8e, 0x30, 0xcb, 0x91, 0xe4, 0x53, 0x66, 0x16, 0x9e, 0x6f, 0x97, 0x4e, 0x4c,
	0x26, 0x9b, 0xa1, 0x5d, 0xde, 0x16, 0x5b, 0x50, 0xd5, 0x03, 0x09, 0x9c, 0xa2, 0xaa, 0x07, 0x77,
	0x2d, 0x8d, 0x96, 0x2d, 0x15, 0x2f, 0x21, 0xf2, 0xdf, 0xfe, 0x44, 0xe5, 0x37, 0x38, 0x90, 0x1b,
	0x1c, 0x02, 0x0f, 0x5d, 0x32, 0xe2, 0xcb, 0xb1, 0xa9, 0x72, 0x43, 0x93, 0x4f, 0x48, 0x6e, 0xf2,
	0xaf, 0x2e, 0x01, 0x2f, 0x83, 0x4d, 0xd5, 0xdc, 0x97, 0xba, 0x15, 0xda, 0x5f, 0xb8, 0xe2, 0x33,
	0x34, 0x6c, 0xae, 0x13, 0x24, 0xb9, 0xcd, 0xb2, 0x1f, 0xff, 0x47, 0xf6, 0x9f, 0x7c, 0x30, 0x68,
	0x5d, 0xb0, 0xbc, 0x4c, 0x76, 0x7a, 0x9d, 0x6a, 0x1a, 0xfb, 0xe4, 0x3b, 0x41, 0xa6, 0x25, 0x22,
	0x5e, 0xc1, 0x46, 0x8e, 0x29, 0x2a, 0xc2, 0xfe, 0x40, 0x39, 0x94, 0xbb, 0xed, 0x4a, 0xb7, 0x16,
	0x47, 0x05, 0x76, 0xae, 0x1c, 0xfa, 0x61, 0xa7, 0xc4, 0xe4, 0x28, 0x05, 0x4f, 0x4a, 0x70, 0x44,
	0x1b, 0x22, 0xe2, 0xf7, 0x72, 0xc5, 0xb1, 0x3d, 0x8e, 0x95, 0x21, 0xaf, 0x93, 0x53, 0x23, 0x92,
	0xfb, 0x7c, 0x29, 0xdb, 0x8c, 0xcd, 0x2d, 0xca, 0x83, 0xa0, 0x9d, 0xb7, 0x7d, 0x7e, 0x97, 0x63,
	0x36, 0x90, 0x87, 0x21, 0x3f, 0x3b, 0xbe, 0xb0, 0x5b, 0x4d, 0xe3, 0x54, 0x93, 0xe3, 0x31, 0x3d,
	0x0a, 0x17, 0x2c, 0x30, 0x3f, 0x9d, 0x6f, 0x60, 0xeb, 0xee, 0x08, 0xcf, 0xbf, 0x94, 0x2c, 0xde,
	0xe6, 0x02, 0xe5, 0xd1, 0x6f, 0x9d, 0xc3, 0xe1, 0xe3, 0x03, 0x29, 0x76, 0xa0, 0x76, 0x83, 0xf3,
	0xe2, 0x6d, 0x7a, 0xd3, 0xd7, 0x32, 0x53, 0xe9, 0x14, 0xf9, 0x55, 0x34, 0xe3, 0xe0, 0x7c, 0xaa,
	0x7e, 0xac, 0xb4, 0xbe, 0x41, 0x54, 0xd2, 0xf7, 0x11, 0xea, 0xeb, 0x32, 0x35, 0x3a, 0xdd, 0x5c,
	0x34, 0x8a, 0x59, 0xa5, 0x4c, 0xa7, 0xbf, 0x2b, 0x10, 0xf9, 0xb7, 0x7f, 0x85, 0xf9, 0x4c, 0x27,
	0x28, 0x7a, 0xd0, 0x08, 0x9b, 0x47, 0x3c, 0x5b, 0x70, 0x56, 0x36, 0x51, 0x4b, 0x96, 0xfa, 0x7e,
	0x6f, 0xc3, 0x74, 0x9e, 0xbc, 0xaf, 0x88, 0x2f, 0xb0, 0xe6, 0x0f, 0x8b, 0xa3, 0xc5, 0xa9, 0x07,
	0xfb, 0xa5, 0xd5, 0xfa, 0xf7, 0xd8, 0xf8, 0x04, 0xd7, 0x61, 0x27, 0x9e, 0xfd, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x19, 0xdc, 0x61, 0xeb, 0x28, 0x05, 0x00, 0x00,
}
