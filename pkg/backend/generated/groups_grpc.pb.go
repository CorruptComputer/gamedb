// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GroupsServiceClient is the client API for GroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsServiceClient interface {
	Stream(ctx context.Context, in *GroupsRequest, opts ...grpc.CallOption) (GroupsService_StreamClient, error)
	List(ctx context.Context, in *GroupsRequest, opts ...grpc.CallOption) (*GroupsResponse, error)
	Retrieve(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type groupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServiceClient(cc grpc.ClientConnInterface) GroupsServiceClient {
	return &groupsServiceClient{cc}
}

func (c *groupsServiceClient) Stream(ctx context.Context, in *GroupsRequest, opts ...grpc.CallOption) (GroupsService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GroupsService_serviceDesc.Streams[0], "/generated.GroupsService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupsServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupsService_StreamClient interface {
	Recv() (*GroupResponse, error)
	grpc.ClientStream
}

type groupsServiceStreamClient struct {
	grpc.ClientStream
}

func (x *groupsServiceStreamClient) Recv() (*GroupResponse, error) {
	m := new(GroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupsServiceClient) List(ctx context.Context, in *GroupsRequest, opts ...grpc.CallOption) (*GroupsResponse, error) {
	out := new(GroupsResponse)
	err := c.cc.Invoke(ctx, "/generated.GroupsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) Retrieve(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/generated.GroupsService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServiceServer is the server API for GroupsService service.
// All implementations must embed UnimplementedGroupsServiceServer
// for forward compatibility
type GroupsServiceServer interface {
	Stream(*GroupsRequest, GroupsService_StreamServer) error
	List(context.Context, *GroupsRequest) (*GroupsResponse, error)
	Retrieve(context.Context, *GroupRequest) (*GroupResponse, error)
	mustEmbedUnimplementedGroupsServiceServer()
}

// UnimplementedGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServiceServer struct {
}

func (UnimplementedGroupsServiceServer) Stream(*GroupsRequest, GroupsService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedGroupsServiceServer) List(context.Context, *GroupsRequest) (*GroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupsServiceServer) Retrieve(context.Context, *GroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedGroupsServiceServer) mustEmbedUnimplementedGroupsServiceServer() {}

// UnsafeGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServiceServer will
// result in compilation errors.
type UnsafeGroupsServiceServer interface {
	mustEmbedUnimplementedGroupsServiceServer()
}

func RegisterGroupsServiceServer(s grpc.ServiceRegistrar, srv GroupsServiceServer) {
	s.RegisterService(&_GroupsService_serviceDesc, srv)
}

func _GroupsService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupsServiceServer).Stream(m, &groupsServiceStreamServer{stream})
}

type GroupsService_StreamServer interface {
	Send(*GroupResponse) error
	grpc.ServerStream
}

type groupsServiceStreamServer struct {
	grpc.ServerStream
}

func (x *groupsServiceStreamServer) Send(m *GroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.GroupsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).List(ctx, req.(*GroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.GroupsService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Retrieve(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.GroupsService",
	HandlerType: (*GroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _GroupsService_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _GroupsService_Retrieve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GroupsService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "groups.proto",
}
