// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GitHubServiceClient is the client API for GitHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitHubServiceClient interface {
	Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (*CommitsResponse, error)
}

type gitHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitHubServiceClient(cc grpc.ClientConnInterface) GitHubServiceClient {
	return &gitHubServiceClient{cc}
}

func (c *gitHubServiceClient) Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (*CommitsResponse, error) {
	out := new(CommitsResponse)
	err := c.cc.Invoke(ctx, "/generated.GitHubService/Commits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitHubServiceServer is the server API for GitHubService service.
// All implementations must embed UnimplementedGitHubServiceServer
// for forward compatibility
type GitHubServiceServer interface {
	Commits(context.Context, *CommitsRequest) (*CommitsResponse, error)
	mustEmbedUnimplementedGitHubServiceServer()
}

// UnimplementedGitHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGitHubServiceServer struct {
}

func (UnimplementedGitHubServiceServer) Commits(context.Context, *CommitsRequest) (*CommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commits not implemented")
}
func (UnimplementedGitHubServiceServer) mustEmbedUnimplementedGitHubServiceServer() {}

// UnsafeGitHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitHubServiceServer will
// result in compilation errors.
type UnsafeGitHubServiceServer interface {
	mustEmbedUnimplementedGitHubServiceServer()
}

func RegisterGitHubServiceServer(s grpc.ServiceRegistrar, srv GitHubServiceServer) {
	s.RegisterService(&_GitHubService_serviceDesc, srv)
}

func _GitHubService_Commits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitHubServiceServer).Commits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.GitHubService/Commits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitHubServiceServer).Commits(ctx, req.(*CommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitHubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.GitHubService",
	HandlerType: (*GitHubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commits",
			Handler:    _GitHubService_Commits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.proto",
}
