// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.proto

package backend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommitsRequest struct {
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
}

func (m *CommitsRequest) Reset()                    { *m = CommitsRequest{} }
func (m *CommitsRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitsRequest) ProtoMessage()               {}
func (*CommitsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CommitsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CommitsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CommitResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Time    int64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Link    string `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
	Hash    string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CommitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommitResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CommitResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CommitResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*CommitsRequest)(nil), "protos.CommitsRequest")
	proto.RegisterType((*CommitResponse)(nil), "protos.CommitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GitHubService service

type GitHubServiceClient interface {
	Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (GitHubService_CommitsClient, error)
}

type gitHubServiceClient struct {
	cc *grpc.ClientConn
}

func NewGitHubServiceClient(cc *grpc.ClientConn) GitHubServiceClient {
	return &gitHubServiceClient{cc}
}

func (c *gitHubServiceClient) Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (GitHubService_CommitsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GitHubService_serviceDesc.Streams[0], c.cc, "/protos.GitHubService/Commits", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitHubServiceCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitHubService_CommitsClient interface {
	Recv() (*CommitResponse, error)
	grpc.ClientStream
}

type gitHubServiceCommitsClient struct {
	grpc.ClientStream
}

func (x *gitHubServiceCommitsClient) Recv() (*CommitResponse, error) {
	m := new(CommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GitHubService service

type GitHubServiceServer interface {
	Commits(*CommitsRequest, GitHubService_CommitsServer) error
}

func RegisterGitHubServiceServer(s *grpc.Server, srv GitHubServiceServer) {
	s.RegisterService(&_GitHubService_serviceDesc, srv)
}

func _GitHubService_Commits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitHubServiceServer).Commits(m, &gitHubServiceCommitsServer{stream})
}

type GitHubService_CommitsServer interface {
	Send(*CommitResponse) error
	grpc.ServerStream
}

type gitHubServiceCommitsServer struct {
	grpc.ServerStream
}

func (x *gitHubServiceCommitsServer) Send(m *CommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GitHubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GitHubService",
	HandlerType: (*GitHubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Commits",
			Handler:       _GitHubService_Commits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.proto",
}

func init() { proto.RegisterFile("github.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x31, 0xcf, 0x82, 0x30,
	0x10, 0x86, 0x3f, 0x3e, 0x40, 0x62, 0xa3, 0x0e, 0x8d, 0x31, 0x8d, 0x93, 0x61, 0x72, 0x22, 0x46,
	0x37, 0x13, 0x27, 0x07, 0x9d, 0x1c, 0xea, 0x2f, 0x00, 0x73, 0xc2, 0x45, 0x4a, 0x91, 0x2b, 0xfe,
	0x7e, 0xd3, 0x56, 0x06, 0x9d, 0xee, 0xbd, 0x27, 0xf7, 0x24, 0xf7, 0xb2, 0x49, 0x89, 0xa6, 0xea,
	0x8b, 0xac, 0xed, 0xb4, 0xd1, 0x7c, 0xe4, 0x06, 0xa5, 0x7b, 0x36, 0x3b, 0x6a, 0xa5, 0xd0, 0x90,
	0x84, 0x67, 0x0f, 0x64, 0xf8, 0x9c, 0xc5, 0x35, 0x2a, 0x34, 0x22, 0x58, 0x05, 0xeb, 0x58, 0xfa,
	0x85, 0x73, 0x16, 0xb5, 0x79, 0x09, 0xe2, 0xdf, 0x41, 0x97, 0xd3, 0xfb, 0xe0, 0x4a, 0xa0, 0x56,
	0x37, 0x04, 0x5c, 0xb0, 0x44, 0x01, 0x91, 0x3d, 0xb4, 0xf6, 0x58, 0x0e, 0xab, 0xf5, 0x0d, 0x2a,
	0xef, 0x87, 0xd2, 0x65, 0xcb, 0x6a, 0x6c, 0x1e, 0x22, 0x74, 0xa7, 0x2e, 0x5b, 0x56, 0xe5, 0x54,
	0x89, 0xc8, 0x33, 0x9b, 0xb7, 0x17, 0x36, 0x3d, 0xa1, 0x39, 0xf7, 0xc5, 0x15, 0xba, 0x17, 0xde,
	0x80, 0x1f, 0x58, 0xf2, 0x79, 0x9a, 0x2f, 0x7c, 0x1f, 0xca, 0xbe, 0x5b, 0x2c, 0x7f, 0xf8, 0xf0,
	0x61, 0xfa, 0xb7, 0x09, 0x0a, 0xdf, 0x7d, 0xf7, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x32, 0x5c,
	0x67, 0x12, 0x01, 0x00, 0x00,
}
