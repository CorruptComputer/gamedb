// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.proto

package backend

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommitsRequest struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitsRequest) Reset()         { *m = CommitsRequest{} }
func (m *CommitsRequest) String() string { return proto.CompactTextString(m) }
func (*CommitsRequest) ProtoMessage()    {}
func (*CommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7664b366d7fb87ed, []int{0}
}

func (m *CommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitsRequest.Unmarshal(m, b)
}
func (m *CommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitsRequest.Marshal(b, m, deterministic)
}
func (m *CommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitsRequest.Merge(m, src)
}
func (m *CommitsRequest) XXX_Size() int {
	return xxx_messageInfo_CommitsRequest.Size(m)
}
func (m *CommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitsRequest proto.InternalMessageInfo

func (m *CommitsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CommitsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CommitResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Link                 string   `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7664b366d7fb87ed, []int{1}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommitResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CommitResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CommitResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*CommitsRequest)(nil), "backend.CommitsRequest")
	proto.RegisterType((*CommitResponse)(nil), "backend.CommitResponse")
}

func init() { proto.RegisterFile("github.proto", fileDescriptor_7664b366d7fb87ed) }

var fileDescriptor_7664b366d7fb87ed = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0xcf, 0x82, 0x30,
	0x10, 0x86, 0x3f, 0x3e, 0x40, 0x62, 0xa3, 0x0e, 0x8d, 0x89, 0x8d, 0x93, 0x61, 0x72, 0x22, 0x46,
	0x37, 0x17, 0x07, 0x07, 0x1d, 0x4d, 0xfd, 0x05, 0x14, 0x4f, 0xb8, 0x40, 0x29, 0xd2, 0xe2, 0xef,
	0x37, 0x2d, 0x30, 0xe8, 0xf6, 0xde, 0xd3, 0x7b, 0x92, 0x7b, 0x4b, 0x66, 0x39, 0x9a, 0xa2, 0x13,
	0x49, 0xd3, 0x2a, 0xa3, 0x68, 0x24, 0xd2, 0xac, 0x84, 0xfa, 0x11, 0x1f, 0xc9, 0xe2, 0xac, 0xa4,
	0x44, 0xa3, 0x39, 0xbc, 0x3a, 0xd0, 0x86, 0x2e, 0x49, 0x58, 0xa1, 0x44, 0xc3, 0xbc, 0x8d, 0xb7,
	0x0d, 0x79, 0x3f, 0x50, 0x4a, 0x82, 0x26, 0xcd, 0x81, 0xfd, 0x3b, 0xe8, 0x72, 0xfc, 0x1c, 0x5d,
	0x0e, 0xba, 0x51, 0xb5, 0x06, 0xca, 0x48, 0x24, 0x41, 0x6b, 0xbb, 0x68, 0xed, 0x29, 0x1f, 0x47,
	0xeb, 0x1b, 0x94, 0xbd, 0xef, 0x73, 0x97, 0x2d, 0xab, 0xb0, 0x2e, 0x99, 0xef, 0x56, 0x5d, 0xb6,
	0xac, 0x48, 0x75, 0xc1, 0x82, 0x9e, 0xd9, 0xbc, 0xbf, 0x91, 0xf9, 0x05, 0xcd, 0xb5, 0x13, 0x77,
	0x68, 0xdf, 0x98, 0x01, 0x3d, 0x91, 0x68, 0x38, 0x9a, 0xae, 0x92, 0xa1, 0x49, 0xf2, 0x5d, 0x63,
	0xfd, 0xfb, 0x30, 0xde, 0x18, 0xff, 0xed, 0x3c, 0x31, 0x71, 0xbf, 0x70, 0xf8, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x44, 0x5c, 0xa0, 0x23, 0x15, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitHubServiceClient is the client API for GitHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitHubServiceClient interface {
	Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (GitHubService_CommitsClient, error)
}

type gitHubServiceClient struct {
	cc *grpc.ClientConn
}

func NewGitHubServiceClient(cc *grpc.ClientConn) GitHubServiceClient {
	return &gitHubServiceClient{cc}
}

func (c *gitHubServiceClient) Commits(ctx context.Context, in *CommitsRequest, opts ...grpc.CallOption) (GitHubService_CommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitHubService_serviceDesc.Streams[0], "/backend.GitHubService/Commits", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitHubServiceCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitHubService_CommitsClient interface {
	Recv() (*CommitResponse, error)
	grpc.ClientStream
}

type gitHubServiceCommitsClient struct {
	grpc.ClientStream
}

func (x *gitHubServiceCommitsClient) Recv() (*CommitResponse, error) {
	m := new(CommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GitHubServiceServer is the server API for GitHubService service.
type GitHubServiceServer interface {
	Commits(*CommitsRequest, GitHubService_CommitsServer) error
}

func RegisterGitHubServiceServer(s *grpc.Server, srv GitHubServiceServer) {
	s.RegisterService(&_GitHubService_serviceDesc, srv)
}

func _GitHubService_Commits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitHubServiceServer).Commits(m, &gitHubServiceCommitsServer{stream})
}

type GitHubService_CommitsServer interface {
	Send(*CommitResponse) error
	grpc.ServerStream
}

type gitHubServiceCommitsServer struct {
	grpc.ServerStream
}

func (x *gitHubServiceCommitsServer) Send(m *CommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GitHubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.GitHubService",
	HandlerType: (*GitHubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Commits",
			Handler:       _GitHubService_Commits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.proto",
}
