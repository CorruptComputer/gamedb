// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"github.com/pkg/errors"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories      []StatSchema     `json:"categories"`
	Developers      []StatSchema     `json:"developers"`
	Genres          []StatSchema     `json:"genres"`
	Id              int              `json:"id"`
	MetacriticScore int32            `json:"metacritic_score"`
	Name            string           `json:"name"`
	PlayersMax      int              `json:"players_max"`
	PlayersWeekMax  int              `json:"players_week_max"`
	Prices          AppSchema_Prices `json:"prices"`
	Publishers      []StatSchema     `json:"publishers"`
	ReleaseDate     int64            `json:"release_date"`
	ReviewsNegative int              `json:"reviews_negative"`
	ReviewsPositive int              `json:"reviews_positive"`
	ReviewsScore    float64          `json:"reviews_score"`
	Tags            []StatSchema     `json:"tags"`
}

// AppSchema_Prices defines model for AppSchema.Prices.
type AppSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// ArticleSchema defines model for article-schema.
type ArticleSchema struct {
	AppIcon   string `json:"app_icon"`
	AppId     int32  `json:"app_id"`
	Author    string `json:"author"`
	Contents  string `json:"contents"`
	Date      int64  `json:"date"`
	Feed      string `json:"feed"`
	FeedLabel string `json:"feed_label"`
	FeedType  int32  `json:"feed_type"`
	Icon      string `json:"icon"`
	Id        int64  `json:"id"`
	Title     string `json:"title"`
	Url       string `json:"url"`
}

// GroupSchema defines model for group-schema.
type GroupSchema struct {
	Abbreviation  string  `json:"abbreviation"`
	AppId         int32   `json:"app_id"`
	Error         string  `json:"error"`
	Headline      string  `json:"headline"`
	Icon          string  `json:"icon"`
	Id            string  `json:"id"`
	Members       int32   `json:"members"`
	MembersInChat int32   `json:"members_in_chat"`
	MembersInGame int32   `json:"members_in_game"`
	MembersOnline int32   `json:"members_online"`
	Name          string  `json:"name"`
	Primaries     int32   `json:"primaries"`
	Trending      float32 `json:"trending"`
	Url           string  `json:"url"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PackageSchema defines model for package-schema.
type PackageSchema struct {
	Apps             []int32              `json:"apps"`
	AppsCount        int32                `json:"apps_count"`
	BillingType      string               `json:"billing_type"`
	Bundle           []int32              `json:"bundle"`
	ChangeId         int32                `json:"change_id"`
	ChangeNumberDate int64                `json:"change_number_date"`
	ComingSoon       bool                 `json:"coming_soon"`
	DepotIds         []int32              `json:"depot_ids"`
	Icon             string               `json:"icon"`
	Id               int32                `json:"id"`
	ImageLogo        string               `json:"image_logo"`
	ImagePage        string               `json:"image_page"`
	LicenseType      string               `json:"license_type"`
	Name             string               `json:"name"`
	Platforms        []string             `json:"platforms"`
	Prices           PackageSchema_Prices `json:"prices"`
	ReleaseDate      string               `json:"release_date"`
	ReleaseDateUnix  int64                `json:"release_date_unix"`
	Status           string               `json:"status"`
}

// PackageSchema_Prices defines model for PackageSchema.Prices.
type PackageSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int64 `json:"pagesCurrent"`
	PagesTotal   int64 `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Comments  int    `json:"comments"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Friends   int    `json:"friends"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// ProductPriceSchema defines model for product-price-schema.
type ProductPriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Free            bool   `json:"free"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// StatSchema defines model for stat-schema.
type StatSchema struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// LimitParam defines model for limit-param.
type LimitParam int

// OffsetParam defines model for offset-param.
type OffsetParam int

// OrderParamDesc defines model for order-param-desc.
type OrderParamDesc string

// List of OrderParamDesc
const (
	OrderParamDesc_asc  OrderParamDesc = "asc"
	OrderParamDesc_desc OrderParamDesc = "desc"
)

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// ArticlesResponse defines model for articles-response.
type ArticlesResponse struct {
	Articles   []ArticleSchema  `json:"articles"`
	Pagination PaginationSchema `json:"pagination"`
}

// GroupsResponse defines model for groups-response.
type GroupsResponse struct {
	Groups     []GroupSchema    `json:"groups"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PackagesResponse defines model for packages-response.
type PackagesResponse struct {
	Packages   []PackageSchema  `json:"packages"`
	Pagination PaginationSchema `json:"pagination"`
}

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	Offset *OffsetParam    `json:"offset,omitempty"`
	Limit  *LimitParam     `json:"limit,omitempty"`
	Order  *OrderParamDesc `json:"order,omitempty"`
	Sort   *string         `json:"sort,omitempty"`
	Ids    *[]int32        `json:"ids,omitempty"`
	AppIds *[]int32        `json:"app_ids,omitempty"`
	Feed   *string         `json:"feed,omitempty"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Offset     *OffsetParam    `json:"offset,omitempty"`
	Limit      *LimitParam     `json:"limit,omitempty"`
	Order      *OrderParamDesc `json:"order,omitempty"`
	Sort       *string         `json:"sort,omitempty"`
	Ids        *[]int32        `json:"ids,omitempty"`
	Tags       *[]int32        `json:"tags,omitempty"`
	Genres     *[]int32        `json:"genres,omitempty"`
	Categories *[]int32        `json:"categories,omitempty"`
	Developers *[]int32        `json:"developers,omitempty"`
	Publishers *[]int32        `json:"publishers,omitempty"`
	Platforms  *[]string       `json:"platforms,omitempty"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	Offset *OffsetParam    `json:"offset,omitempty"`
	Limit  *LimitParam     `json:"limit,omitempty"`
	Order  *OrderParamDesc `json:"order,omitempty"`
	Sort   *string         `json:"sort,omitempty"`
	Ids    *[]int64        `json:"ids,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	Offset      *OffsetParam    `json:"offset,omitempty"`
	Limit       *LimitParam     `json:"limit,omitempty"`
	Order       *OrderParamDesc `json:"order,omitempty"`
	Sort        *string         `json:"sort,omitempty"`
	Ids         *[]int32        `json:"ids,omitempty"`
	BillingType *[]int32        `json:"billingType,omitempty"`
	LicenseType *[]int32        `json:"licenseType,omitempty"`
	Status      *[]int32        `json:"status,omitempty"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Offset    *OffsetParam    `json:"offset,omitempty"`
	Limit     *LimitParam     `json:"limit,omitempty"`
	Order     *OrderParamDesc `json:"order,omitempty"`
	Sort      *string         `json:"sort,omitempty"`
	Continent *[]string       `json:"continent,omitempty"`
	Country   *[]string       `json:"country,omitempty"`
}

// Getter for additional properties for AppSchema_Prices. Returns the specified
// element and whether it was found
func (a AppSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSchema_Prices
func (a *AppSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSchema_Prices to handle AdditionalProperties
func (a *AppSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSchema_Prices to handle AdditionalProperties
func (a AppSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PackageSchema_Prices. Returns the specified
// element and whether it was found
func (a PackageSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PackageSchema_Prices
func (a *PackageSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PackageSchema_Prices to handle AdditionalProperties
func (a *PackageSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PackageSchema_Prices to handle AdditionalProperties
func (a PackageSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Articles
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// List Games
	// (GET /games)
	GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams)
	// Retrieve Game
	// (GET /games/{id})
	GetGamesId(w http.ResponseWriter, r *http.Request, id int32)
	// List Groups
	// (GET /groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// List Packages
	// (GET /packages)
	GetPackages(w http.ResponseWriter, r *http.Request, params GetPackagesParams)
	// List Players
	// (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request, params GetPlayersParams)
	// Retrieve Player
	// (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request, id int64)
	// Update Player
	// (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "app_ids" -------------
	if paramValue := r.URL.Query().Get("app_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "app_ids", r.URL.Query(), &params.AppIds)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter app_ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "feed" -------------
	if paramValue := r.URL.Query().Get("feed"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "feed", r.URL.Query(), &params.Feed)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter feed: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticles(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "genres" -------------
	if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------
	if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "developers" -------------
	if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "publishers" -------------
	if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "platforms" -------------
	if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGames(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGamesId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPackages operation middleware
func (siw *ServerInterfaceWrapper) GetPackages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "billingType" -------------
	if paramValue := r.URL.Query().Get("billingType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "billingType", r.URL.Query(), &params.BillingType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter billingType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "licenseType" -------------
	if paramValue := r.URL.Query().Get("licenseType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "licenseType", r.URL.Query(), &params.LicenseType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter licenseType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter status: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackages(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPlayers operation middleware
func (siw *ServerInterfaceWrapper) GetPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlayersParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "continent" -------------
	if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------
	if paramValue := r.URL.Query().Get("country"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlayers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPlayersId operation middleware
func (siw *ServerInterfaceWrapper) GetPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlayersId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPlayersId operation middleware
func (siw *ServerInterfaceWrapper) PostPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPlayersId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles", wrapper.GetArticles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games", wrapper.GetGames)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games/{id}", wrapper.GetGamesId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups", wrapper.GetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packages", wrapper.GetPackages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/players", wrapper.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/players/{id}", wrapper.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/players/{id}", wrapper.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bTaX3y/2/wsAAP//rM1n9CQ3AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
