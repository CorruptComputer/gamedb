// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"github.com/pkg/errors"
	"net/http"
	"strings"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories      []StatSchema     `json:"categories"`
	Developers      []StatSchema     `json:"developers"`
	Genres          []StatSchema     `json:"genres"`
	Id              int              `json:"id"`
	MetacriticScore int32            `json:"metacritic_score"`
	Name            string           `json:"name"`
	PlayersMax      int              `json:"players_max"`
	PlayersWeekMax  int              `json:"players_week_max"`
	Prices          AppSchema_Prices `json:"prices"`
	Publishers      []StatSchema     `json:"publishers"`
	ReleaseDate     int64            `json:"release_date"`
	ReviewsNegative int              `json:"reviews_negative"`
	ReviewsPositive int              `json:"reviews_positive"`
	ReviewsScore    float64          `json:"reviews_score"`
	Tags            []StatSchema     `json:"tags"`
}

// AppSchema_Prices defines model for AppSchema.Prices.
type AppSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int64 `json:"pagesCurrent"`
	PagesTotal   int64 `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Comments  int    `json:"comments"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Friends   int    `json:"friends"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// ProductPriceSchema defines model for product-price-schema.
type ProductPriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Free            bool   `json:"free"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// StatSchema defines model for stat-schema.
type StatSchema struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// LimitParam defines model for limit-param.
type LimitParam int

// OffsetParam defines model for offset-param.
type OffsetParam int

// OrderParamDesc defines model for order-param-desc.
type OrderParamDesc string

// List of OrderParamDesc
const (
	OrderParamDesc_asc  OrderParamDesc = "asc"
	OrderParamDesc_desc OrderParamDesc = "desc"
)

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Offset     *OffsetParam    `json:"offset,omitempty"`
	Limit      *LimitParam     `json:"limit,omitempty"`
	Order      *OrderParamDesc `json:"order,omitempty"`
	Sort       *string         `json:"sort,omitempty"`
	Ids        *[]int32        `json:"ids,omitempty"`
	Tags       *[]int32        `json:"tags,omitempty"`
	Genres     *[]int32        `json:"genres,omitempty"`
	Categories *[]int32        `json:"categories,omitempty"`
	Developers *[]int32        `json:"developers,omitempty"`
	Publishers *[]int32        `json:"publishers,omitempty"`
	Platforms  *[]string       `json:"platforms,omitempty"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Offset    *OffsetParam    `json:"offset,omitempty"`
	Limit     *LimitParam     `json:"limit,omitempty"`
	Order     *OrderParamDesc `json:"order,omitempty"`
	Sort      *string         `json:"sort,omitempty"`
	Continent *[]string       `json:"continent,omitempty"`
	Country   *[]string       `json:"country,omitempty"`
}

// Getter for additional properties for AppSchema_Prices. Returns the specified
// element and whether it was found
func (a AppSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSchema_Prices
func (a *AppSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSchema_Prices to handle AdditionalProperties
func (a *AppSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSchema_Prices to handle AdditionalProperties
func (a AppSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Games
	// (GET /games)
	GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams)
	// Retrieve Game
	// (GET /games/{id})
	GetGamesId(w http.ResponseWriter, r *http.Request, id int32)
	// List Players
	// (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request, params GetPlayersParams)
	// Retrieve Player
	// (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request, id int64)
	// Update Player
	// (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "genres" -------------
	if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------
	if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "developers" -------------
	if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "publishers" -------------
	if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "platforms" -------------
	if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetGames(w, r.WithContext(ctx), params)
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.GetGamesId(w, r.WithContext(ctx), id)
}

// GetPlayers operation middleware
func (siw *ServerInterfaceWrapper) GetPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlayersParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "continent" -------------
	if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------
	if paramValue := r.URL.Query().Get("country"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetPlayers(w, r.WithContext(ctx), params)
}

// GetPlayersId operation middleware
func (siw *ServerInterfaceWrapper) GetPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.GetPlayersId(w, r.WithContext(ctx), id)
}

// PostPlayersId operation middleware
func (siw *ServerInterfaceWrapper) PostPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.PostPlayersId(w, r.WithContext(ctx), id)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/games", wrapper.GetGames)
	})
	r.Group(func(r chi.Router) {
		r.Get("/games/{id}", wrapper.GetGamesId)
	})
	r.Group(func(r chi.Router) {
		r.Get("/players", wrapper.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Get("/players/{id}", wrapper.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Post("/players/{id}", wrapper.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
