// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories      []StatSchema         `json:"categories"`
	Developers      []StatSchema         `json:"developers"`
	Genres          []StatSchema         `json:"genres"`
	Id              int                  `json:"id"`
	MetacriticScore int32                `json:"metacritic_score"`
	Name            string               `json:"name"`
	PlayersMax      int                  `json:"players_max"`
	PlayersWeekAvg  float64              `json:"players_week_avg"`
	PlayersWeekMax  int                  `json:"players_week_max"`
	Prices          []ProductPriceSchema `json:"prices"`
	Publishers      []StatSchema         `json:"publishers"`
	ReleaseDate     int64                `json:"release_date"`
	ReviewsNegative int                  `json:"reviews_negative"`
	ReviewsPositive int                  `json:"reviews_positive"`
	ReviewsScore    float64              `json:"reviews_score"`
	Tags            []StatSchema         `json:"tags"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int64 `json:"pagesCurrent"`
	PagesTotal   int64 `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Comments  int    `json:"comments"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Friends   int    `json:"friends"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// ProductPriceSchema defines model for product-price-schema.
type ProductPriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Free            bool   `json:"free"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// StatSchema defines model for stat-schema.
type StatSchema struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// LimitParam defines model for limit-param.
type LimitParam int

// OffsetParam defines model for offset-param.
type OffsetParam int

// OrderParamDesc defines model for order-param-desc.
type OrderParamDesc string

// List of OrderParamDesc
const (
	OrderParamDesc_asc  OrderParamDesc = "asc"
	OrderParamDesc_desc OrderParamDesc = "desc"
)

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Offset     *OffsetParam    `json:"offset,omitempty"`
	Limit      *LimitParam     `json:"limit,omitempty"`
	Order      *OrderParamDesc `json:"order,omitempty"`
	Sort       *string         `json:"sort,omitempty"`
	Ids        *[]int32        `json:"ids,omitempty"`
	Tags       *[]int32        `json:"tags,omitempty"`
	Genres     *[]int32        `json:"genres,omitempty"`
	Categories *[]int32        `json:"categories,omitempty"`
	Developers *[]int32        `json:"developers,omitempty"`
	Publishers *[]int32        `json:"publishers,omitempty"`
	Platforms  *[]string       `json:"platforms,omitempty"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Offset    *OffsetParam    `json:"offset,omitempty"`
	Limit     *LimitParam     `json:"limit,omitempty"`
	Order     *OrderParamDesc `json:"order,omitempty"`
	Sort      *string         `json:"sort,omitempty"`
	Continent *[]string       `json:"continent,omitempty"`
	Country   *[]string       `json:"country,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Games
	// (GET /games)
	GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams)
	// Retrieve Game
	// (GET /games/{id})
	GetGamesId(w http.ResponseWriter, r *http.Request, id int32)
	// List Players
	// (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request, params GetPlayersParams)
	// Retrieve Player
	// (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request, id int64)
	// Update Player
	// (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "genres" -------------
	if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------
	if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "developers" -------------
	if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "publishers" -------------
	if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "platforms" -------------
	if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetGames(w, r.WithContext(ctx), params)
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.GetGamesId(w, r.WithContext(ctx), id)
}

// GetPlayers operation middleware
func (siw *ServerInterfaceWrapper) GetPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlayersParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "continent" -------------
	if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------
	if paramValue := r.URL.Query().Get("country"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetPlayers(w, r.WithContext(ctx), params)
}

// GetPlayersId operation middleware
func (siw *ServerInterfaceWrapper) GetPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.GetPlayersId(w, r.WithContext(ctx), id)
}

// PostPlayersId operation middleware
func (siw *ServerInterfaceWrapper) PostPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.PostPlayersId(w, r.WithContext(ctx), id)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/games", wrapper.GetGames)
	})
	r.Group(func(r chi.Router) {
		r.Get("/games/{id}", wrapper.GetGamesId)
	})
	r.Group(func(r chi.Router) {
		r.Get("/players", wrapper.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Get("/players/{id}", wrapper.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Post("/players/{id}", wrapper.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
