// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"github.com/pkg/errors"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories      []StatSchema     `json:"categories"`
	Developers      []StatSchema     `json:"developers"`
	Genres          []StatSchema     `json:"genres"`
	Id              int              `json:"id"`
	MetacriticScore int32            `json:"metacritic_score"`
	Name            string           `json:"name"`
	PlayersMax      int              `json:"players_max"`
	PlayersWeekMax  int              `json:"players_week_max"`
	Prices          AppSchema_Prices `json:"prices"`
	Publishers      []StatSchema     `json:"publishers"`
	ReleaseDate     int64            `json:"release_date"`
	ReviewsNegative int              `json:"reviews_negative"`
	ReviewsPositive int              `json:"reviews_positive"`
	ReviewsScore    float64          `json:"reviews_score"`
	Tags            []StatSchema     `json:"tags"`
}

// AppSchema_Prices defines model for AppSchema.Prices.
type AppSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// ArticleSchema defines model for article-schema.
type ArticleSchema struct {
	AppIcon   string `json:"app_icon"`
	AppId     int32  `json:"app_id"`
	Author    string `json:"author"`
	Contents  string `json:"contents"`
	Date      int64  `json:"date"`
	Feed      string `json:"feed"`
	FeedLabel string `json:"feed_label"`
	FeedType  int32  `json:"feed_type"`
	Icon      string `json:"icon"`
	Id        int64  `json:"id"`
	Title     string `json:"title"`
	Url       string `json:"url"`
}

// GroupSchema defines model for group-schema.
type GroupSchema struct {
	Abbreviation  string  `json:"abbreviation"`
	AppId         int32   `json:"app_id"`
	Error         string  `json:"error"`
	Headline      string  `json:"headline"`
	Icon          string  `json:"icon"`
	Id            string  `json:"id"`
	Members       int32   `json:"members"`
	MembersInChat int32   `json:"members_in_chat"`
	MembersInGame int32   `json:"members_in_game"`
	MembersOnline int32   `json:"members_online"`
	Name          string  `json:"name"`
	Primaries     int32   `json:"primaries"`
	Trending      float32 `json:"trending"`
	Type          string  `json:"type"`
	Url           string  `json:"url"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PackageSchema defines model for package-schema.
type PackageSchema struct {
	Apps             []int32              `json:"apps"`
	AppsCount        int32                `json:"apps_count"`
	BillingType      string               `json:"billing_type"`
	Bundle           []int32              `json:"bundle"`
	ChangeId         int32                `json:"change_id"`
	ChangeNumberDate int64                `json:"change_number_date"`
	ComingSoon       bool                 `json:"coming_soon"`
	DepotIds         []int32              `json:"depot_ids"`
	Icon             string               `json:"icon"`
	Id               int32                `json:"id"`
	ImageLogo        string               `json:"image_logo"`
	ImagePage        string               `json:"image_page"`
	LicenseType      string               `json:"license_type"`
	Name             string               `json:"name"`
	Platforms        []string             `json:"platforms"`
	Prices           PackageSchema_Prices `json:"prices"`
	ReleaseDate      string               `json:"release_date"`
	ReleaseDateUnix  int64                `json:"release_date_unix"`
	Status           string               `json:"status"`
}

// PackageSchema_Prices defines model for PackageSchema.Prices.
type PackageSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int64 `json:"pagesCurrent"`
	PagesTotal   int64 `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Comments  int    `json:"comments"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Friends   int    `json:"friends"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// ProductPriceSchema defines model for product-price-schema.
type ProductPriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Free            bool   `json:"free"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// StatSchema defines model for stat-schema.
type StatSchema struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// LimitParam defines model for limit-param.
type LimitParam int

// OffsetParam defines model for offset-param.
type OffsetParam int

// OrderParamDesc defines model for order-param-desc.
type OrderParamDesc string

// List of OrderParamDesc
const (
	OrderParamDesc_asc  OrderParamDesc = "asc"
	OrderParamDesc_desc OrderParamDesc = "desc"
)

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// ArticlesResponse defines model for articles-response.
type ArticlesResponse struct {
	Articles   []ArticleSchema  `json:"articles"`
	Pagination PaginationSchema `json:"pagination"`
}

// GroupsResponse defines model for groups-response.
type GroupsResponse struct {
	Groups     []GroupSchema    `json:"groups"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PackagesResponse defines model for packages-response.
type PackagesResponse struct {
	Packages   []PackageSchema  `json:"packages"`
	Pagination PaginationSchema `json:"pagination"`
}

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	Offset *OffsetParam    `json:"offset,omitempty"`
	Limit  *LimitParam     `json:"limit,omitempty"`
	Order  *OrderParamDesc `json:"order,omitempty"`
	Sort   *string         `json:"sort,omitempty"`
	Ids    *[]int32        `json:"ids,omitempty"`
	AppIds *[]int32        `json:"app_ids,omitempty"`
	Feed   *string         `json:"feed,omitempty"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Offset     *OffsetParam    `json:"offset,omitempty"`
	Limit      *LimitParam     `json:"limit,omitempty"`
	Order      *OrderParamDesc `json:"order,omitempty"`
	Sort       *string         `json:"sort,omitempty"`
	Ids        *[]int32        `json:"ids,omitempty"`
	Tags       *[]int32        `json:"tags,omitempty"`
	Genres     *[]int32        `json:"genres,omitempty"`
	Categories *[]int32        `json:"categories,omitempty"`
	Developers *[]int32        `json:"developers,omitempty"`
	Publishers *[]int32        `json:"publishers,omitempty"`
	Platforms  *[]string       `json:"platforms,omitempty"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	Offset *OffsetParam    `json:"offset,omitempty"`
	Limit  *LimitParam     `json:"limit,omitempty"`
	Order  *OrderParamDesc `json:"order,omitempty"`
	Sort   *string         `json:"sort,omitempty"`
	Ids    *[]int64        `json:"ids,omitempty"`
	Type   *[]string       `json:"type,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	Offset      *OffsetParam    `json:"offset,omitempty"`
	Limit       *LimitParam     `json:"limit,omitempty"`
	Order       *OrderParamDesc `json:"order,omitempty"`
	Sort        *string         `json:"sort,omitempty"`
	Ids         *[]int32        `json:"ids,omitempty"`
	BillingType *[]int32        `json:"billingType,omitempty"`
	LicenseType *[]int32        `json:"licenseType,omitempty"`
	Status      *[]int32        `json:"status,omitempty"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Offset    *OffsetParam    `json:"offset,omitempty"`
	Limit     *LimitParam     `json:"limit,omitempty"`
	Order     *OrderParamDesc `json:"order,omitempty"`
	Sort      *string         `json:"sort,omitempty"`
	Continent *[]string       `json:"continent,omitempty"`
	Country   *[]string       `json:"country,omitempty"`
}

// Getter for additional properties for AppSchema_Prices. Returns the specified
// element and whether it was found
func (a AppSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSchema_Prices
func (a *AppSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSchema_Prices to handle AdditionalProperties
func (a *AppSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSchema_Prices to handle AdditionalProperties
func (a AppSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PackageSchema_Prices. Returns the specified
// element and whether it was found
func (a PackageSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PackageSchema_Prices
func (a *PackageSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PackageSchema_Prices to handle AdditionalProperties
func (a *PackageSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PackageSchema_Prices to handle AdditionalProperties
func (a PackageSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Articles
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// List Games
	// (GET /games)
	GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams)
	// Retrieve Game
	// (GET /games/{id})
	GetGamesId(w http.ResponseWriter, r *http.Request, id int32)
	// List Groups
	// (GET /groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// List Packages
	// (GET /packages)
	GetPackages(w http.ResponseWriter, r *http.Request, params GetPackagesParams)
	// List Players
	// (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request, params GetPlayersParams)
	// Retrieve Player
	// (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request, id int64)
	// Update Player
	// (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "app_ids" -------------
	if paramValue := r.URL.Query().Get("app_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "app_ids", r.URL.Query(), &params.AppIds)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter app_ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "feed" -------------
	if paramValue := r.URL.Query().Get("feed"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "feed", r.URL.Query(), &params.Feed)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter feed: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetArticles(w, r.WithContext(ctx), params)
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "genres" -------------
	if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------
	if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "developers" -------------
	if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "publishers" -------------
	if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "platforms" -------------
	if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetGames(w, r.WithContext(ctx), params)
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.GetGamesId(w, r.WithContext(ctx), id)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter type: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetGroups(w, r.WithContext(ctx), params)
}

// GetPackages operation middleware
func (siw *ServerInterfaceWrapper) GetPackages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "billingType" -------------
	if paramValue := r.URL.Query().Get("billingType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "billingType", r.URL.Query(), &params.BillingType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter billingType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "licenseType" -------------
	if paramValue := r.URL.Query().Get("licenseType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "licenseType", r.URL.Query(), &params.LicenseType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter licenseType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter status: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetPackages(w, r.WithContext(ctx), params)
}

// GetPlayers operation middleware
func (siw *ServerInterfaceWrapper) GetPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlayersParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "continent" -------------
	if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------
	if paramValue := r.URL.Query().Get("country"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetPlayers(w, r.WithContext(ctx), params)
}

// GetPlayersId operation middleware
func (siw *ServerInterfaceWrapper) GetPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.GetPlayersId(w, r.WithContext(ctx), id)
}

// PostPlayersId operation middleware
func (siw *ServerInterfaceWrapper) PostPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

	ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

	siw.Handler.PostPlayersId(w, r.WithContext(ctx), id)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/articles", wrapper.GetArticles)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/games", wrapper.GetGames)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/games/{id}", wrapper.GetGamesId)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/groups", wrapper.GetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/packages", wrapper.GetPackages)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/players", wrapper.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/players/{id}", wrapper.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Post(baseURL+"/players/{id}", wrapper.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//wnWuLpINwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
