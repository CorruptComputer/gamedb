// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories      []int   `json:"categories"`
	Developers      []int   `json:"developers"`
	Genres          []int   `json:"genres"`
	Id              int     `json:"id"`
	MetacriticScore int32   `json:"metacritic_score"`
	Name            string  `json:"name"`
	PlayersMax      int     `json:"players_max"`
	PlayersWeekAvg  float64 `json:"players_week_avg"`
	PlayersWeekMax  int     `json:"players_week_max"`
	Prices          []struct {
		Currency        string `json:"currency"`
		DiscountPercent int32  `json:"discountPercent"`
		Final           int32  `json:"final"`
		Individual      int32  `json:"individual"`
		Initial         int32  `json:"initial"`
	} `json:"prices"`
	Publishers      []int   `json:"publishers"`
	ReleaseDate     int64   `json:"release_date"`
	ReviewsNegative int     `json:"reviews_negative"`
	ReviewsPositive int     `json:"reviews_positive"`
	ReviewsScore    float64 `json:"reviews_score"`
	Tags            []int   `json:"tags"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int   `json:"pagesCurrent"`
	PagesTotal   int   `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Comments  int    `json:"comments"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Friends   int    `json:"friends"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// PriceSchema defines model for price-schema.
type PriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// LimitParam defines model for limit-param.
type LimitParam int

// OffsetParam defines model for offset-param.
type OffsetParam int

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PaginationResponse defines model for pagination-response.
type PaginationResponse PaginationSchema

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetAppsParams defines parameters for GetApps.
type GetAppsParams struct {
	Key        string       `json:"key"`
	Offset     *OffsetParam `json:"offset,omitempty"`
	Limit      *LimitParam  `json:"limit,omitempty"`
	Sort       *string      `json:"sort,omitempty"`
	Order      *string      `json:"order,omitempty"`
	Ids        *[]int       `json:"ids,omitempty"`
	Tags       *[]int       `json:"tags,omitempty"`
	Genres     *[]int       `json:"genres,omitempty"`
	Categories *[]int       `json:"categories,omitempty"`
	Developers *[]int       `json:"developers,omitempty"`
	Publishers *[]int       `json:"publishers,omitempty"`
	Platforms  *[]string    `json:"platforms,omitempty"`
}

// GetAppsIdParams defines parameters for GetAppsId.
type GetAppsIdParams struct {
	Key string `json:"key"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Key       string       `json:"key"`
	Offset    *OffsetParam `json:"offset,omitempty"`
	Limit     *LimitParam  `json:"limit,omitempty"`
	Sort      *string      `json:"sort,omitempty"`
	Order     *string      `json:"order,omitempty"`
	Continent *[]string    `json:"continent,omitempty"`
	Country   *[]string    `json:"country,omitempty"`
}

// GetPlayersIdParams defines parameters for GetPlayersId.
type GetPlayersIdParams struct {
	Key string `json:"key"`
}

// PostPlayersIdParams defines parameters for PostPlayersId.
type PostPlayersIdParams struct {
	Key string `json:"key"`
}

type ServerInterface interface {
	// List Apps (GET /apps)
	GetApps(w http.ResponseWriter, r *http.Request)
	// Retrieve App (GET /apps/{id})
	GetAppsId(w http.ResponseWriter, r *http.Request)
	// List Players (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request)
	// Retrieve Player (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request)
	// Update Player (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request)
}

// ParamsForGetApps operation parameters from context
func ParamsForGetApps(ctx context.Context) *GetAppsParams {
	return ctx.Value("GetAppsParams").(*GetAppsParams)
}

// GetApps operation middleware
func GetAppsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetAppsParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "sort" -------------
		if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "order" -------------
		if paramValue := r.URL.Query().Get("order"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "ids" -------------
		if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "genres" -------------
		if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "categories" -------------
		if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "developers" -------------
		if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "publishers" -------------
		if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "platforms" -------------
		if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetAppsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetAppsId operation parameters from context
func ParamsForGetAppsId(ctx context.Context) *GetAppsIdParams {
	return ctx.Value("GetAppsIdParams").(*GetAppsIdParams)
}

// GetAppsId operation middleware
func GetAppsIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int32

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetAppsIdParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetAppsIdParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetPlayers operation parameters from context
func ParamsForGetPlayers(ctx context.Context) *GetPlayersParams {
	return ctx.Value("GetPlayersParams").(*GetPlayersParams)
}

// GetPlayers operation middleware
func GetPlayersCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetPlayersParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "sort" -------------
		if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "order" -------------
		if paramValue := r.URL.Query().Get("order"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "continent" -------------
		if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "country" -------------
		if paramValue := r.URL.Query().Get("country"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetPlayersParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetPlayersId operation parameters from context
func ParamsForGetPlayersId(ctx context.Context) *GetPlayersIdParams {
	return ctx.Value("GetPlayersIdParams").(*GetPlayersIdParams)
}

// GetPlayersId operation middleware
func GetPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetPlayersIdParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetPlayersIdParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForPostPlayersId operation parameters from context
func ParamsForPostPlayersId(ctx context.Context) *PostPlayersIdParams {
	return ctx.Value("PostPlayersIdParams").(*PostPlayersIdParams)
}

// PostPlayersId operation middleware
func PostPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params PostPlayersIdParams

		headers := r.Header

		// ------------- Required header parameter "key" -------------
		if valueList, found := headers[http.CanonicalHeaderKey("key")]; found {
			var Key string
			n := len(valueList)
			if n != 1 {
				http.Error(w, fmt.Sprintf("Expected one value for key, got %d", n), http.StatusBadRequest)
				return
			}

			err = runtime.BindStyledParameter("simple", false, "key", valueList[0], &Key)
			if err != nil {
				http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
				return
			}

			params.Key = Key

		} else {
			http.Error(w, fmt.Sprintf("Header parameter key is required, but not found", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "PostPlayersIdParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetAppsCtx)
		r.Get("/apps", si.GetApps)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetAppsIdCtx)
		r.Get("/apps/{id}", si.GetAppsId)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersCtx)
		r.Get("/players", si.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersIdCtx)
		r.Get("/players/{id}", si.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Use(PostPlayersIdCtx)
		r.Post("/players/{id}", si.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTW/jNhD9Kwa7RyX2JkWB6tS0BYq0W8DotpcaqsFIY3k2IqklKSdG4P9ekBJFSab8",
	"kQ+0RfcU0BrOGz4OH4eTJ5IKVgoOXCsSP5GSSspAg7SjAhnqC/ubGSInMflcgdySiHDKgMS1CYmIStfA",
	"qLHKYEWrQpP4/SwijD4iq5gZmBHyZhQRvS3NfOQacpBkt4uIWK0UHMGrbcKAXYRZAGEXEQmqFFyBXR4t",
	"ywv3gxmngmvguvlUYEo1Cj79pAQ3v3nEdxJWJCZfTT150/qrmhqnjaVFzEClEkvjicTkhk9oWZJdZBDU",
	"89D7Hj+g0hOxMm5VNHlAvZ6UNEduZ5OIlFKUIDW2S7Z/UQNT5yylpZNKSbdm3EE54sdbembMVnyuUEJG",
	"4gXpRWxjTALkdZdqImCgFM3h9ffQOR7fx19riz4Prx9IiLm9WOY0hwnylZCsptAEVdAtyDcIqPZ7IMEn",
	"tYkP4plZ3s/bFyVbG8nJmT9Y5jD5D2WvgzqUwM7GWDSQTo/GCEiphlzIZtQuYqhx+8c0gw0UxtO5E3Pg",
	"8mw0zMJ2DDRNJWpMlyoV0qZCnbC13fUViQLTatFvHSotkeedDV0y+hgGdAYPAPdLusl7gJmo7grwiLxi",
	"d4Fp484lpgNqBrtVSQk83QZjz1ClouJ6DjJtjsIJVKyQ0+JEW+QZbjCrzpiAGk+0HiR/u1TvxQW7v9Re",
	"aEnoUqnuClTr87NVQgFUwTKjei+5vvk6uGgJG4QHteSQU40bCAM5q1IoPG61n9zjuaZpft4qB8xj5sqi",
	"xld7ZqOuXPQkoMdwm8j98xQ4BYHzNKA8QFSA4SFRAWFIOhf7mBg23wOna0CRM0z69/SY37qYPS17mkL0",
	"NOOS5qB+sCdFj0iKsfhd6PoQBjLBfTqKNqCgLZhdpV576iEOAkx8ATHGFN1QTWVQ3u5olsNIPqeCMffU",
	"CH3lGnmfIu/XCokMS+pKIvBsxG1O2Vg8uRRVOfKtd5V5qMIcpvCMg7eVRjaiHUo3mrU3b0M56u2yksXx",
	"VO+qQbM77V50iPdcOWJaFtzaOvF61ru740LuBZi4e3G8hPlyKZ5yKZqMgLSSqLcfDZM1efewvVgDzUC2",
	"L+Nm2D6N72HrI6Ml/gL2ZjQz60f0yJM6OG9nCVgJV7PT1O4JMIoFicknZEDzAr7LzQ+XqWDe38+F/UQi",
	"YhOXrLUuVTydmnTL7i4FL5DD1Dk12oa6MBM/aqBs8uP3k5v5rUkukKqum99bwS2B0xJJTK4vZ5czK1p6",
	"bcmZumdtXiuyyTqr9LcZiclPoG9Km9/d7sbiEBl+L7WsoNtsKKnWIM3Evxazi29vLv5Mnq5mu3eeQX8+",
	"w28MH8S01/A4wb7bjzHmoQUoIfvtkUBYwcaKrJMp0FchVKUkIsArRuLFohmapw1JkuhUALSa490fKHsY",
	"fbytv9q20bAKCvtvSqCzAU7139ZWb4bQK9reDKVXDb4ZSq/MfDuUgmqjzYdB/C3jMa73IJJBd/BqNhtr",
	"E7R2034Xz2p3xRg1Ylu/9q3ymN+t6fQJs90xobrN/gmpsghGUbsn9qD/vUvxYHv3ufSOsfsbaImwAcNw",
	"TXCnyTNG77wx+Z9eBV7R7dY2gl4PXO3XloyuOmwKQV82trXk6dp/6HKx98iLb5dedbqvBIw+fgCe6zWJ",
	"r6LzdGEU0BXGrwv3rHOy12kNKNG803R0E47qUTPpvyhJ9nH8+pI07KyPqNLcd8GFCnA7F+ooueEC/9/E",
	"bijNX8jv3j91+gT/UWZUe3q7ryVLXPedtEjMOjvvn0ViYlIgN47nQy8U89jYJbu/AwAA///vPZwNIx0A",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
