// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories      []int   `json:"categories"`
	Developers      []int   `json:"developers"`
	Genres          []int   `json:"genres"`
	Id              int     `json:"id"`
	MetacriticScore int32   `json:"metacritic_score"`
	Name            string  `json:"name"`
	PlayersMax      int     `json:"players_max"`
	PlayersWeekAvg  float64 `json:"players_week_avg"`
	PlayersWeekMax  int     `json:"players_week_max"`
	Prices          []struct {
		Currency        string `json:"currency"`
		DiscountPercent int32  `json:"discountPercent"`
		Final           int32  `json:"final"`
		Individual      int32  `json:"individual"`
		Initial         int32  `json:"initial"`
	} `json:"prices"`
	Publishers      []int   `json:"publishers"`
	ReleaseDate     int64   `json:"release_date"`
	ReviewsNegative int     `json:"reviews_negative"`
	ReviewsPositive int     `json:"reviews_positive"`
	ReviewsScore    float64 `json:"reviews_score"`
	Tags            []int   `json:"tags"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int   `json:"pagesCurrent"`
	PagesTotal   int   `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Comments  int    `json:"comments"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Friends   int    `json:"friends"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// PriceSchema defines model for price-schema.
type PriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PaginationResponse defines model for pagination-response.
type PaginationResponse PaginationSchema

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetAppsParams defines parameters for GetApps.
type GetAppsParams struct {
	Key        string    `json:"key"`
	Offset     *int      `json:"offset,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Sort       *string   `json:"sort,omitempty"`
	Order      *string   `json:"order,omitempty"`
	Ids        *[]int    `json:"ids,omitempty"`
	Tags       *[]int    `json:"tags,omitempty"`
	Genres     *[]int    `json:"genres,omitempty"`
	Categories *[]int    `json:"categories,omitempty"`
	Developers *[]int    `json:"developers,omitempty"`
	Publishers *[]int    `json:"publishers,omitempty"`
	Platforms  *[]string `json:"platforms,omitempty"`
}

// GetAppsIdParams defines parameters for GetAppsId.
type GetAppsIdParams struct {
	Key string `json:"key"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Key       string    `json:"key"`
	Offset    *int      `json:"offset,omitempty"`
	Limit     *int      `json:"limit,omitempty"`
	Sort      *string   `json:"sort,omitempty"`
	Order     *string   `json:"order,omitempty"`
	Continent *[]string `json:"continent,omitempty"`
	Country   *[]string `json:"country,omitempty"`
}

// GetPlayersIdParams defines parameters for GetPlayersId.
type GetPlayersIdParams struct {
	Key string `json:"key"`
}

// PostPlayersIdParams defines parameters for PostPlayersId.
type PostPlayersIdParams struct {
	Key string `json:"key"`
}

type ServerInterface interface {
	// List Apps (GET /apps)
	GetApps(w http.ResponseWriter, r *http.Request)
	// Retrieve App (GET /apps/{id})
	GetAppsId(w http.ResponseWriter, r *http.Request)
	// List Players (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request)
	// Retrieve Player (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request)
	// Update Player (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request)
}

// ParamsForGetApps operation parameters from context
func ParamsForGetApps(ctx context.Context) *GetAppsParams {
	return ctx.Value("GetAppsParams").(*GetAppsParams)
}

// GetApps operation middleware
func GetAppsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetAppsParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "sort" -------------
		if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "order" -------------
		if paramValue := r.URL.Query().Get("order"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "ids" -------------
		if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "genres" -------------
		if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "categories" -------------
		if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "developers" -------------
		if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "publishers" -------------
		if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "platforms" -------------
		if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetAppsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetAppsId operation parameters from context
func ParamsForGetAppsId(ctx context.Context) *GetAppsIdParams {
	return ctx.Value("GetAppsIdParams").(*GetAppsIdParams)
}

// GetAppsId operation middleware
func GetAppsIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int32

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetAppsIdParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetAppsIdParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetPlayers operation parameters from context
func ParamsForGetPlayers(ctx context.Context) *GetPlayersParams {
	return ctx.Value("GetPlayersParams").(*GetPlayersParams)
}

// GetPlayers operation middleware
func GetPlayersCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetPlayersParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "sort" -------------
		if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "order" -------------
		if paramValue := r.URL.Query().Get("order"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "continent" -------------
		if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "country" -------------
		if paramValue := r.URL.Query().Get("country"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetPlayersParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetPlayersId operation parameters from context
func ParamsForGetPlayersId(ctx context.Context) *GetPlayersIdParams {
	return ctx.Value("GetPlayersIdParams").(*GetPlayersIdParams)
}

// GetPlayersId operation middleware
func GetPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetPlayersIdParams

		// ------------- Required query parameter "key" -------------
		if paramValue := r.URL.Query().Get("key"); paramValue != "" {

		} else {
			http.Error(w, "Query argument key is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetPlayersIdParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForPostPlayersId operation parameters from context
func ParamsForPostPlayersId(ctx context.Context) *PostPlayersIdParams {
	return ctx.Value("PostPlayersIdParams").(*PostPlayersIdParams)
}

// PostPlayersId operation middleware
func PostPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params PostPlayersIdParams

		headers := r.Header

		// ------------- Required header parameter "key" -------------
		if valueList, found := headers[http.CanonicalHeaderKey("key")]; found {
			var Key string
			n := len(valueList)
			if n != 1 {
				http.Error(w, fmt.Sprintf("Expected one value for key, got %d", n), http.StatusBadRequest)
				return
			}

			err = runtime.BindStyledParameter("simple", false, "key", valueList[0], &Key)
			if err != nil {
				http.Error(w, fmt.Sprintf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
				return
			}

			params.Key = Key

		} else {
			http.Error(w, fmt.Sprintf("Header parameter key is required, but not found", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "PostPlayersIdParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *chi.Mux) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetAppsCtx)
		r.Get("/apps", si.GetApps)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetAppsIdCtx)
		r.Get("/apps/{id}", si.GetAppsId)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersCtx)
		r.Get("/players", si.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersIdCtx)
		r.Get("/players/{id}", si.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Use(PostPlayersIdCtx)
		r.Post("/players/{id}", si.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ32/bNhD+Vwyuj0rkpMPQ6WnZBgzZOsBYt5cZmsFIZ/kakVRJyokR+H8fSImWKFP+",
	"kSbYCvSpkXm8O3787uORfSKZYJXgwLUiyRORoCrBFdgPWlUX7gfznQmuget2qMSMahQ8/qgEN7+pbAWM",
	"mr/eSFiShHwTd87jZlTFxmlrud1uI5KDyiRWxhNJyA2f0Koi28hEUM+L7nt8j0pPxNK4VdHkAfVqUtEC",
	"uZ1NIlJJUYHUuFuy/Rc1MHXOUiKiNxWQhFAp6cZ896Ic8dNZdshERMKnGiXkJJkTL2ObYxoAr79UkwED",
	"pWgBL7+HzvH4Pv7eWPg4vHwiIeT2cpnRAibIl0KyBkKTVEk3IF8hocbvAYJPGpMuiWey3OftZ5Ftl8nJ",
	"zB8sc0j+Q+x1oQ4R2NkYizak06MxADKqoRCy/dotos0LuYaiAX1YpjmsoTSezp1YAJdnR8M8bMdA00yi",
	"xmyhMiEtFRrCNnZvr0kUmMYpg55DpSXyorehC0YfwwGdwQPA/YKuCy9gLuq7ErqIvGZ3gWnjziVmA2gG",
	"u1VLCTzbBHPPUWWi5noGMmtL4QQolshpeaIt8hzXmNdnTECNJ1oPyL9baufFJbu/VC+1NHSo1HclqtX5",
	"bJVQAlWwyKneI9d33wYXLWGN8KAWHAqqcQ3hQM6qEgqPW+2Te5xrmhbnrXKAPOakrZDW165mo75ceBLg",
	"Ibwjsl9PgSoI1NMA8gBQAYSHQAWEIe0d7GNi2I4HqmsAkTNM/XN6zG+JDPWJ7BHLpYJTjStagPrJVooe",
	"kRRj8afQTREGmOCGjkYbQNDmGbWLc568iIME066BGEOKrqmmMihvdzQvYITPmWDMteKhUa6R+xB1fq2Q",
	"yLCkLiUCz0fcFpSN5VNIUVcjY95R1oUqTTGFZxw8rTSyEe1QutWsvXlrylFvFrUsj1O9rwbt7uz2ogd8",
	"h5UDZoeCW1sv3w71/u64lL0EU3cujrcwXw/FUw5FwwjIaol688Eg2YB3D5uLFdAcbNGh6SbbT8c7Y9Jl",
	"Riv8DezJaGZ+qqGpHDux+To8b2sBWArXs9PM7gkwiiVJyEdkQIsSfijMD5eZYJ2/X0s7RCJiiUtWWlcq",
	"iWNDt/zuUvASOcTOqdE21KWZ+EEDZZOff5zczG4NuUCqpm++soJbAacVkoS8vZxeTq1o6ZUFJ3bX2qJR",
	"ZMM6q/S3OUnIL6BvKsvvikrKQNvuYn4IjG4vtawh6l9LqNYgzcR/5tOL728u/k6frqfbNx2CXX2GI+wE",
	"uX+jX9K61CSZRoQhR1Yz+/c+y8IunbQHPF4Zl/SxcXk17Qe4Oj2AEtL3f+paZcPQbiJwE3o+J1RlpLkf",
	"kTQ9GTy0wtW5O9A7Mfp424zaZQ9bqbD/to86O8Cp/ncN2qtF8Dq/V4vitZSvFsXrVV8vSkm1EfjDQbqj",
	"qovxdi9EGvlPjNfT6dhbw84u9p8C7QFQM0aNYjdPBla+zO/WNH7CfHtM7W7z/0zvjCz3K/ag/72T9aA8",
	"PRfeMXT/AC0R1mAQbgDuvRSNwTtrTb6eJ1/+eeI1tfu1z+jje+CFXpHkOjpPCUYDun76ZcM9qzL2HmgD",
	"2jPrvVW6CUcVqJ30JYqQvVO/vAgNH+RHdGjWPZ4LFcB2JtRRcMP3gv8TuiGafya+e/8X5AP8V5VT3cHb",
	"v2RZ4MwlKRPiHoEk8zTyrlvuu71EzVOToQK5dqh315wkjkuR0XIllE7eTd9dxebGsk23/wYAAP//hy7r",
	"GYgcAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
