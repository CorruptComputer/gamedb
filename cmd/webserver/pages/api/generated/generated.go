// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// ErrorSchema defines model for error-schema.
type ErrorSchema struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int   `json:"pagesCurrent"`
	PagesTotal   int   `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// SucccessSchema defines model for succcess-schema.
type SucccessSchema struct {
	Message string `json:"message"`
}

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// ErrorResponse defines model for error-response.
type ErrorResponse ErrorSchema

// PaginationResponse defines model for pagination-response.
type PaginationResponse PaginationSchema

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// SuccessResponse defines model for success-response.
type SuccessResponse SucccessSchema

// GetAppsParams defines parameters for GetApps.
type GetAppsParams struct {
	Ids  *[]interface{} `json:"ids,omitempty"`
	Tags *[]interface{} `json:"tags,omitempty"`

	// Offset
	Offset *int `json:"offset,omitempty"`

	// Limit
	Limit *int `json:"limit,omitempty"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Continent *string `json:"continent,omitempty"`
	Country   *string `json:"country,omitempty"`

	// Offset
	Offset *int `json:"offset,omitempty"`

	// Limit
	Limit *int `json:"limit,omitempty"`
}

type ServerInterface interface {
	// List apps (GET /apps)
	GetApps(w http.ResponseWriter, r *http.Request)
	// Retrieve app (GET /apps/{id})
	GetAppsId(w http.ResponseWriter, r *http.Request)
	// List players (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request)
	// Update a player (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request)
}

// ParamsForGetApps operation parameters from context
func ParamsForGetApps(ctx context.Context) *GetAppsParams {
	return ctx.Value("GetAppsParams").(*GetAppsParams)
}

// GetApps operation middleware
func GetAppsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetAppsParams

		// ------------- Optional query parameter "ids" -------------
		if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetAppsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetAppsId operation middleware
func GetAppsIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int32

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetPlayers operation parameters from context
func ParamsForGetPlayers(ctx context.Context) *GetPlayersParams {
	return ctx.Value("GetPlayersParams").(*GetPlayersParams)
}

// GetPlayers operation middleware
func GetPlayersCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetPlayersParams

		// ------------- Optional query parameter "continent" -------------
		if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "country" -------------
		if paramValue := r.URL.Query().Get("country"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetPlayersParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// PostPlayersId operation middleware
func PostPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *chi.Mux) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetAppsCtx)
		r.Get("/apps", si.GetApps)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetAppsIdCtx)
		r.Get("/apps/{id}", si.GetAppsId)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersCtx)
		r.Get("/players", si.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Use(PostPlayersIdCtx)
		r.Post("/players/{id}", si.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXS2/cNhD+K8K0R8ZaO0XR6lS3BQq3AWrU7cnYAyvNapmIj5CU64Wh/14MqaclrdfJ",
	"5pZLshSH37y+jxw/Qa6l0QqVd5A9gUVntHIYFtyYN90HWudaeVS+3apEzr3QKn3vtKJvLt+j5PTrW4s7",
	"yOCbdABP465LCbS1bJqGQYEut8IQEmRwrRJuDDSMPLhP8z5FfCecT/SOYB1L/hN+nxheChVOAwNjtUHr",
	"RZ9y+F94lO41qTDwB4OQAbeWH2g98vICzmA5VIaBxY+1sFhAdg+TiEOM24XijVOlCNBabc/fwQh7tIfB",
	"ZFqE88exVLZZMLe8xESonbYy1o+CqvgBv0BhWtwjlUmiyRDEJ1J8StrPYlofycm0f5bmc+Yfo27n6hh7",
	"O5uGgavzHJ07f6cIOCCv9+ou+g75tMe6O3GtD6Kgf9tqCOWxjK1WXOJox3krVDkrlCigNd322l3zlOsC",
	"l31JdI6XJ7gLEIP9dirWNceVkCLUPgoq+v7+O2ALoejdzuGpxoaX6H6prW17u2Lxt/a8Wt733daL3p5V",
	"oo2Ttcl1SBOPzwLcDrfIucjQ0n3Myhnmyc0dukqwmNdW+MMdoUagD3h4k2v9QQQsQXxvl12AZDKUjhvx",
	"B4ZXjU7ukRdo+5Pt8pSTH2u0h/5gXB0/RwnQ9d1Jn+eBHii5qCCD90IiLyv8qaQPF7mWA97vVdgCBrUl",
	"2733xmVpWnKJxb8XWlVCYdqBEoOEr+jgnUcuk19/Tq5vb4DBA1oX74TLQGuDihsBGby92FxsAjX8PpQ1",
	"7caHMvKeehf0dFNABr+hv6Z9OmC5RB8u3fvlYoiCDAcijEkdqMRA8sebeF9fbjbzW3gZ1/PyVcBLuNOL",
	"8s9OPkvuem2Nx7MdrysP2YaBFErIWobfc5XOR7mozyVHnXYX/FASkj9GR6FUvdvLBbdbNp2Crzabteek",
	"t0un02oUs5ScyB4ftjiTNSxyJH0SRfMSUW6KFaoQ38ZMgbH4va1xrb9vr+ALJb+W+1/orcAHjFM9pT+a",
	"NtaSv21NThIK6VdQRJPmS/74DlXp95BdsflluQZVKx8+vALoqxhmfJiNtgt66Ke8ESd6VRjtFphxq11H",
	"jfNLIwwKi83+zGLMZthpMf4xBfeY8P4vg/GLHfIav9X32+kL3K3bd/V+SzE6tA9dUYaXL0vTSue82mvn",
	"sx83P1ym9Ig12+b/AAAA//8Wb5k3AxAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
