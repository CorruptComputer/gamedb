// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AppSchema defines model for app-schema.
type AppSchema struct {
	Categories []int  `json:"categories"`
	Developers []int  `json:"developers"`
	Genres     []int  `json:"genres"`
	Id         int    `json:"id"`
	Name       string `json:"name"`
	Publishers []int  `json:"publishers"`
	Tags       []int  `json:"tags"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Message string `json:"message"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int   `json:"pagesCurrent"`
	PagesTotal   int   `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// AppResponse defines model for app-response.
type AppResponse AppSchema

// AppsResponse defines model for apps-response.
type AppsResponse struct {
	Apps       []AppSchema      `json:"apps"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// PaginationResponse defines model for pagination-response.
type PaginationResponse PaginationSchema

// PlayerResponse defines model for player-response.
type PlayerResponse PlayerSchema

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// GetAppsParams defines parameters for GetApps.
type GetAppsParams struct {
	Offset     *int      `json:"offset,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Ids        *[]int    `json:"ids,omitempty"`
	Tags       *[]int    `json:"tags,omitempty"`
	Genres     *[]int    `json:"genres,omitempty"`
	Categories *[]int    `json:"categories,omitempty"`
	Developers *[]int    `json:"developers,omitempty"`
	Publishers *[]int    `json:"publishers,omitempty"`
	Platforms  *[]string `json:"platforms,omitempty"`
}

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Offset    *int      `json:"offset,omitempty"`
	Limit     *int      `json:"limit,omitempty"`
	Continent *[]string `json:"continent,omitempty"`
	Country   *[]string `json:"country,omitempty"`
}

type ServerInterface interface {
	// List Apps (GET /apps)
	GetApps(w http.ResponseWriter, r *http.Request)
	// Retrieve App (GET /apps/{id})
	GetAppsId(w http.ResponseWriter, r *http.Request)
	// List Players (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request)
	// Retrieve Player (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request)
	// Update Player (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request)
}

// ParamsForGetApps operation parameters from context
func ParamsForGetApps(ctx context.Context) *GetAppsParams {
	return ctx.Value("GetAppsParams").(*GetAppsParams)
}

// GetApps operation middleware
func GetAppsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetAppsParams

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "ids" -------------
		if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "genres" -------------
		if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "categories" -------------
		if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "developers" -------------
		if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "publishers" -------------
		if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "platforms" -------------
		if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetAppsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetAppsId operation middleware
func GetAppsIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int32

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForGetPlayers operation parameters from context
func ParamsForGetPlayers(ctx context.Context) *GetPlayersParams {
	return ctx.Value("GetPlayersParams").(*GetPlayersParams)
}

// GetPlayers operation middleware
func GetPlayersCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetPlayersParams

		// ------------- Optional query parameter "offset" -------------
		if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "continent" -------------
		if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "country" -------------
		if paramValue := r.URL.Query().Get("country"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetPlayersParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetPlayersId operation middleware
func GetPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// PostPlayersId operation middleware
func PostPlayersIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		ctx = context.WithValue(ctx, "key-cookie.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-header.Scopes", []string{""})

		ctx = context.WithValue(ctx, "key-query.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *chi.Mux) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetAppsCtx)
		r.Get("/apps", si.GetApps)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetAppsIdCtx)
		r.Get("/apps/{id}", si.GetAppsId)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersCtx)
		r.Get("/players", si.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetPlayersIdCtx)
		r.Get("/players/{id}", si.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Use(PostPlayersIdCtx)
		r.Post("/players/{id}", si.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYS3PjNgz+Kx60R21kJ51Oq1PTdqaTdg+epj1lfOBKsMxd8bEklcaT8X/vgKKelvxI",
	"7MueYooAPgD8AIJ5hVQJrSRKZyF5BYNWK2nRL5jWH+oPtE6VdChd2Cp4yhxXMv5slaRvNt2gYPTre4Nr",
	"SOC7uDUeV7s2JqNBcrfbRZChTQ3XZAkSuJczpjXsIkKwb0PvW/zIrZupNZm10ew/7jYzzXIuvTZEoI3S",
	"aBxvQvZ/uUNhzwklArfVCAkwY9iW1h2UI3ZayTYzERj8WnKDGSRP0PPY+7gaSV43VPJAoLUsx8ufYW14",
	"+hwfyzRFa/t5uLwjY5nb82XJcpxxuVZGVCkkpwq2RXMFhyq7Bwg+q0RaJ97I8j5v30W2xpOTmT8Ic0j+",
	"Q+ytoQ4RuJYhiQBZ96OpBKTMYa5MWDVBBL+4dJhXSR+WaYbPWJClcxVzlOZsNJ6Ny0kmsLNjneEy9ydT",
	"fiq43ZzvnmP5eSqDQ+MZBLeCrSbiqJvsXgJ77q46HWjq1ML+SOQDb2rBVb+hTNktuOC+hqqir8L+8QeI",
	"RrKg1muLpwprlqP9rTQm1OiExD/KsWIi6fXWUbRBCoKfUQiuttRDHDi4ajvdVKYqQp4Q+QRDJ1mz8sWL",
	"aWm42z4SegX4BbcfUqW+cG+NU9mHZY1BIq0LTPO/0DOaNDfIMjSNZlieovm1RLNtFKvVYT0KgK6Nui2z",
	"1B85CsYLSOAzF8jyAn/J6cNNqkRr78/Cb0EEpSHZjXPaJnGcM4HZpxslCy4xro0SK7grSPHRIROz33+d",
	"3S8fIIJnNLZqjQtPVY2SaQ4J3N3Mb+b+uN3GpzWuJ5e84jKdsa+RhwwS+APdPe2TgmECne8nT+PJaIjW",
	"HanWrCwcJPMIBJdclML/3qfsuMmasiMWF2SSvVQmF/MuwOJ0AJ7ZnvkDXU+wl4dq16MNm+C4/dABzwY4",
	"1X7TWq+G0OvZV0PpXQZXQ+ncMtdEKZijxngYpL2qW4y7PYhV1H9a3c7nUzNWIxf3n0C+n5ZCMGpj1ajk",
	"a5q+e9H4lWe7Yy3gIZtoAtRJuvUE3cbuTIndJHTvi7tbOFKzbw1+Kva/0RmOz0jxV+F35tep4JdB5Jtt",
	"gXSbcMriOF0Fe/mIMncbSG6j88g7CVhK5z9cFu5NdNl7S42Uy7LzrKgVjhZNULp83fg56/J1M3zZTpTO",
	"sn2FKjsS+VLZa4c+xpB3Br/3H49+9P/qjLk29u6E6qPqzqZPq/7EWa/DHPm0Ig8tmuc6Je2kl8RxoVJW",
	"bJR1yc/znxYxDW271e7/AAAA//9xNwAebhMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
